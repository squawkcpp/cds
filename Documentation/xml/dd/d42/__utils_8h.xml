<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="dd/d42/__utils_8h" kind="file" language="C++">
    <compoundname>_utils.h</compoundname>
    <includes local="no">algorithm</includes>
    <includes local="no">regex</includes>
    <includes local="no">map</includes>
    <includes local="no">string</includes>
    <includes local="no">vector</includes>
    <includes local="no">opencv2/opencv.hpp</includes>
    <includes local="yes">spdlog/spdlog.h</includes>
    <includes local="no">boost/algorithm/string.hpp</includes>
    <includes local="yes">rapidxml_ns.hpp</includes>
    <includes local="yes">rapidxml_ns_print.hpp</includes>
    <includes local="yes">fmt/format.h</includes>
    <includedby refid="df/d0a/main_8cpp" local="yes">main.cpp</includedby>
    <includedby refid="df/d59/config_8cpp" local="yes">src/config.cpp</includedby>
    <includedby refid="df/d5e/filemetaregex_8cpp" local="yes">src/filemetaregex.cpp</includedby>
    <includedby refid="d5/d7b/mod__albums_8cpp" local="yes">src/modules/mod_albums.cpp</includedby>
    <includedby refid="d5/db2/image_8h" local="yes">src/utils/image.h</includedby>
    <includedby refid="d1/d93/mod__ebooks_8cpp" local="yes">src/modules/mod_ebooks.cpp</includedby>
    <includedby refid="dc/d37/mod__images_8cpp" local="yes">src/modules/mod_images.cpp</includedby>
    <includedby refid="d5/d0f/mod__movies_8cpp" local="yes">src/modules/mod_movies.cpp</includedby>
    <includedby refid="de/d91/mod__series_8cpp" local="yes">src/modules/mod_series.cpp</includedby>
    <includedby refid="d4/d77/scanner_8cpp" local="yes">src/scanner.cpp</includedby>
    <includedby refid="df/dd7/server_8cpp" local="yes">src/server.cpp</includedby>
    <includedby refid="d9/dde/amazon_8cpp" local="yes">src/utils/amazon.cpp</includedby>
    <includedby refid="d0/d64/imageexif_8cpp" local="yes">src/utils/imageexif.cpp</includedby>
    <incdepgraph>
      <node id="51">
        <label>boost/algorithm/string.hpp</label>
      </node>
      <node id="54">
        <label>fmt/format.h</label>
      </node>
      <node id="49">
        <label>opencv2/opencv.hpp</label>
      </node>
      <node id="47">
        <label>string</label>
      </node>
      <node id="46">
        <label>map</label>
      </node>
      <node id="45">
        <label>regex</label>
      </node>
      <node id="50">
        <label>spdlog/spdlog.h</label>
      </node>
      <node id="52">
        <label>rapidxml_ns.hpp</label>
      </node>
      <node id="53">
        <label>rapidxml_ns_print.hpp</label>
      </node>
      <node id="48">
        <label>vector</label>
      </node>
      <node id="43">
        <label>src/_utils.h</label>
        <link refid="_utils.h"/>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>algorithm</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="60">
        <label>src/utils/image.h</label>
        <link refid="d5/db2/image_8h_source"/>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>src/filemetaregex.cpp</label>
        <link refid="df/d5e/filemetaregex_8cpp_source"/>
      </node>
      <node id="59">
        <label>src/modules/mod_albums.cpp</label>
        <link refid="d5/d7b/mod__albums_8cpp_source"/>
      </node>
      <node id="67">
        <label>src/server.cpp</label>
        <link refid="df/dd7/server_8cpp_source"/>
      </node>
      <node id="68">
        <label>src/utils/amazon.cpp</label>
        <link refid="d9/dde/amazon_8cpp_source"/>
      </node>
      <node id="61">
        <label>src/modules/mod_ebooks.cpp</label>
        <link refid="d1/d93/mod__ebooks_8cpp_source"/>
      </node>
      <node id="62">
        <label>src/modules/mod_images.cpp</label>
        <link refid="dc/d37/mod__images_8cpp_source"/>
      </node>
      <node id="69">
        <label>src/utils/imageexif.cpp</label>
        <link refid="d0/d64/imageexif_8cpp_source"/>
      </node>
      <node id="66">
        <label>src/scanner.cpp</label>
        <link refid="d4/d77/scanner_8cpp_source"/>
      </node>
      <node id="65">
        <label>src/utils/image.cpp</label>
        <link refid="db/d11/image_8cpp_source"/>
      </node>
      <node id="55">
        <label>src/_utils.h</label>
        <link refid="_utils.h"/>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>main.cpp</label>
        <link refid="df/d0a/main_8cpp_source"/>
      </node>
      <node id="64">
        <label>src/modules/mod_series.cpp</label>
        <link refid="de/d91/mod__series_8cpp_source"/>
      </node>
      <node id="63">
        <label>src/modules/mod_movies.cpp</label>
        <link refid="d5/d0f/mod__movies_8cpp_source"/>
      </node>
      <node id="57">
        <label>src/config.cpp</label>
        <link refid="df/d59/config_8cpp_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="d5/da6/structcds_1_1ECoverSizes" prot="public">cds::ECoverSizes</innerclass>
    <innernamespace refid="d9/d60/namespacecds">cds</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/><sp/><sp/>This<sp/>program<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/><sp/><sp/><sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/><sp/><sp/><sp/>the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/><sp/><sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/><sp/><sp/>This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/><sp/><sp/><sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/><sp/><sp/><sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/><sp/><sp/><sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"></highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/><sp/><sp/><sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/><sp/><sp/><sp/>along<sp/>with<sp/>this<sp/>program.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline lineno="14"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_CDS_UTILS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_CDS_UTILS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;regex&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;opencv2/opencv.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;spdlog/spdlog.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/algorithm/string.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;rapidxml_ns.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;rapidxml_ns_print.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;fmt/format.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="d9/d60/namespacecds" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="d9/d60/namespacecds" kindref="compound">cds</ref><sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>CDS_DEBUG<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>CDS_DEBUG<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>LOGGER<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;cds&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>VERSION<sp/>=<sp/>CDS_VERSION;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SLEEP<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>EVENT_SCANNER<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;cds:scanner&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>EVENT_RESCAN<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;cds:rescan&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>EVENT_START<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;start&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>EVENT_END<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;end&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>PARAM_TMP_DIRECTORY<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;tmp-directory&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>PARAM_TMDB_KEY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;tmdb-key&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>PARAM_AMAZON_KEY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;amazon-key&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>PARAM_AMAZON_ACCESS_KEY<sp/><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;amazon-access-key&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>PARAM_REDIS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;redis&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>PARAM_REDIS_PORT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;redis-port&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>PARAM_LISTEN_ADDRESS<sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;listen&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>PARAM_HTTP_PORT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;http-port&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>PARAM_DIRECTORY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;directory&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::vector&lt;<sp/>std::string<sp/>&gt;<sp/>trash_words<sp/>(<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;flac&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;24bit&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;720p&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;1080p&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;amzn&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;webrip&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;dd5.1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;x264&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;mkv&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;hdtv&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;web-dl&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;h264&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;bdrip&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;dts&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;bluray&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;-hdc&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;mp4&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;-2hd&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;-rarbg&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[rarbg]&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;-fgt&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;-japhson&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;-fgt&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;-ntb&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;-moritz&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;-avs&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;-dumbension&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;-it00nz&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;-cravers&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;-rovers&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;-sparks&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[96-24]&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;audio<sp/>fidelity&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;180g<sp/>lp&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;24-96&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal">});</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::vector&lt;<sp/>std::string<sp/>&gt;<sp/>skip_words<sp/>(</highlight></codeline>
<codeline lineno="71"><highlight class="normal">{<sp/></highlight><highlight class="stringliteral">&quot;the<sp/>&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;der<sp/>&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;die<sp/>&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;das<sp/>&quot;</highlight><highlight class="normal"><sp/>}<sp/>);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::array&lt;<sp/>std::string,<sp/>3<sp/>&gt;<sp/>album_cover_names<sp/>(</highlight></codeline>
<codeline lineno="74"><highlight class="normal">{<sp/>{</highlight><highlight class="stringliteral">&quot;cover&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;front&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;folder&quot;</highlight><highlight class="normal">}<sp/>}<sp/>);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::array&lt;<sp/>std::string,<sp/>6<sp/>&gt;<sp/>metadata_relations<sp/>(</highlight></codeline>
<codeline lineno="77"><highlight class="normal">{<sp/>{</highlight><highlight class="stringliteral">&quot;allmusic&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;IMDb&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;official<sp/>homepage&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;image&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;wikipedia&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;discogs&quot;</highlight><highlight class="normal">}<sp/>}<sp/>);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79" refid="d5/da6/structcds_1_1ECoverSizes" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d5/da6/structcds_1_1ECoverSizes" kindref="compound">ECoverSizes</ref><sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>Enum<sp/>{<sp/>TN,<sp/>MED<sp/>};</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>str<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Enum&amp;<sp/>size<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<sp/>size<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>TN:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;tn&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MED:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;med&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>size<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Enum&amp;<sp/>size<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<sp/>size<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>TN:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IMAGE_TN_SIZE;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MED:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IMAGE_MED_SIZE;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>IMAGE_MED_SIZE<sp/>=<sp/>768;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>IMAGE_TN_SIZE<sp/>=<sp/>160;</highlight></codeline>
<codeline lineno="96"><highlight class="normal">};</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/>remove_skip_list<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;<sp/>std::string<sp/>&gt;&amp;<sp/>words,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>s<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>_return_value<sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>__w<sp/>:<sp/>words<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>_pos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>_lower<sp/>=<sp/>boost::algorithm::to_lower_copy<sp/>(<sp/>_return_value<sp/>);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>_pos<sp/>=<sp/>_lower.find<sp/>(<sp/>__w,<sp/>_pos<sp/>)<sp/>)<sp/>!=<sp/>std::string::npos<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_return_value.erase<sp/>(<sp/>_pos,<sp/>__w.size()<sp/>);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_lower.erase<sp/>(<sp/>_pos,<sp/>__w.size()<sp/>);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>std::regex<sp/>brace_re<sp/>(<sp/></highlight><highlight class="stringliteral">&quot;(\\(<sp/>*\\))&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>_return_value<sp/>=<sp/>std::regex_replace<sp/>(<sp/>_return_value,<sp/>brace_re,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>std::regex<sp/>brackets_re<sp/>(<sp/></highlight><highlight class="stringliteral">&quot;(\\[<sp/>*\\])&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>_return_value<sp/>=<sp/>std::regex_replace<sp/>(<sp/>_return_value,<sp/>brackets_re,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>std::regex<sp/>underscore_re<sp/>(<sp/></highlight><highlight class="stringliteral">&quot;([_*])&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>_return_value<sp/>=<sp/>std::regex_replace<sp/>(<sp/>_return_value,<sp/>underscore_re,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>std::regex<sp/>dot_re<sp/>(<sp/></highlight><highlight class="stringliteral">&quot;([\\.*])&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>_return_value<sp/>=<sp/>std::regex_replace<sp/>(<sp/>_return_value,<sp/>dot_re,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::algorithm::trim<sp/>(<sp/>_return_value<sp/>);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_return_value;</highlight></codeline>
<codeline lineno="121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/>clean_string<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>s<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>_result<sp/>=<sp/>boost::algorithm::to_lower_copy<sp/>(<sp/>s<sp/>);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>_word<sp/>:<sp/>skip_words<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>_position;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>_position<sp/>=<sp/>_result.find<sp/>(<sp/>_word<sp/>)<sp/>)<sp/>!=<sp/>std::string::npos<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_result.erase<sp/>(<sp/>_position,<sp/>_word.size()<sp/>);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::algorithm::trim<sp/>(<sp/>_result<sp/>);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_result;</highlight></codeline>
<codeline lineno="135"><highlight class="normal">}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/>path<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>filename<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>_path;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>filename.find<sp/>(<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>)<sp/>!=<sp/>std::string::npos<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_path<sp/>=<sp/>filename.substr<sp/>(<sp/>0,<sp/>filename.rfind<sp/>(<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_path<sp/>=<sp/>filename;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_path;</highlight></codeline>
<codeline lineno="146"><highlight class="normal">}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/>filename<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>filename,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>extension<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>_filename;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>filename.find<sp/>(<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>)<sp/>!=<sp/>std::string::npos<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_filename<sp/>=<sp/>filename.substr<sp/>(<sp/>filename.rfind<sp/>(<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>)<sp/>+<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_filename<sp/>=<sp/>filename;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!extension<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>_filename.find<sp/>(<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal"><sp/>)<sp/>!=<sp/>std::string::npos<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_filename.erase<sp/>(<sp/>_filename.rfind<sp/>(<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_filename;</highlight></codeline>
<codeline lineno="163"><highlight class="normal">}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/>remove_extension<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>file<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>file.find<sp/>(<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal"><sp/>)<sp/>!=<sp/>std::string::npos<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>file.substr<sp/>(<sp/>0,<sp/>file.rfind<sp/>(<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string<sp/>(<sp/>file<sp/>);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal">}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/>clean_isbn<sp/>(<sp/>std::string<sp/>isbn<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>isbn.find<sp/>(<sp/></highlight><highlight class="stringliteral">&quot;urn:isbn:&quot;</highlight><highlight class="normal"><sp/>)<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isbn<sp/>=<sp/>isbn.substr<sp/>(<sp/>9<sp/>);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>isbn.erase<sp/>(<sp/>std::remove_if<sp/>(<sp/>isbn.begin(),<sp/>isbn.end(),</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>[]<sp/>(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>x<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!std::isalpha<sp/>(<sp/>x<sp/>)<sp/>&amp;&amp;<sp/>!std::isdigit<sp/>(<sp/>x<sp/>);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>),<sp/>isbn.end()<sp/>);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>isbn.find<sp/>(<sp/></highlight><highlight class="stringliteral">&quot;ISBN&quot;</highlight><highlight class="normal"><sp/>)<sp/>!=<sp/>std::string::npos<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isbn.substr<sp/>(<sp/>isbn.find<sp/>(<sp/></highlight><highlight class="stringliteral">&quot;ISBN&quot;</highlight><highlight class="normal"><sp/>)<sp/>+<sp/>4<sp/>);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isbn;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="normal">}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/>clean_track_number(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>track<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>_track<sp/>=<sp/>(<sp/>track.find(<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>)<sp/>==<sp/>std::string::npos<sp/>?<sp/>track<sp/>:<sp/>track.substr(<sp/>0,<sp/>track.find(<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>_track.erase(<sp/>_track.begin(),<sp/>std::find_if(<sp/>_track.begin(),<sp/>_track.end(),<sp/>std::bind1st(<sp/>std::not_equal_to&lt;char&gt;(),<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_track;</highlight></codeline>
<codeline lineno="193"><highlight class="normal">}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T<sp/>&gt;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>rapidxml_ns::xml_node&lt;&gt;*<sp/>element(<sp/>rapidxml_ns::xml_document&lt;&gt;*<sp/>doc,<sp/>T*<sp/>parent,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>value<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>rapidxml_ns::xml_node&lt;&gt;<sp/>*_n<sp/>=<sp/>doc-&gt;allocate_node(rapidxml_ns::node_element,</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doc-&gt;allocate_string(name.c_str()),</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doc-&gt;allocate_string(value.c_str())<sp/>);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>parent-&gt;append_node(_n);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_n;</highlight></codeline>
<codeline lineno="202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T<sp/>&gt;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>attr(<sp/>rapidxml_ns::xml_document&lt;&gt;*<sp/>doc,<sp/>T*<sp/>parent,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>value<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>rapidxml_ns::xml_attribute&lt;&gt;<sp/>*_attr<sp/>=<sp/>doc-&gt;allocate_attribute(<sp/>doc-&gt;allocate_string(name.c_str()),<sp/>doc-&gt;allocate_string(value.c_str())<sp/>);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>parent-&gt;append_attribute(_attr);</highlight></codeline>
<codeline lineno="207"><highlight class="normal">}</highlight></codeline>
<codeline lineno="208"><highlight class="normal">}</highlight><highlight class="comment">//namespace<sp/>cds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>_CDS_UTILS_H</highlight></codeline>
    </programlisting>
    <location file="src/_utils.h"/>
  </compounddef>
</doxygen>
