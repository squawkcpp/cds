<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="df/dea/structdata" kind="struct" language="C++" prot="public">
    <compoundname>data</compoundname>
    <includes refid="d9/db6/datastore_8h" local="no">datastore.h</includes>
    <innerclass refid="df/de0/classdata_1_1NodeType" prot="public">data::NodeType</innerclass>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="df/dea/structdata_1a766c39ffada2f9e21fa1fa011160a0d3" prot="public" static="no">
        <type>std::shared_ptr&lt; redox::Redox &gt;</type>
        <definition>typedef std::shared_ptr&lt; redox::Redox &gt; data::redis_ptr</definition>
        <argsstring></argsstring>
        <name>redis_ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/datastore.h" line="146" column="1" bodyfile="src/datastore.h" bodystart="146" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="df/dea/structdata_1a28210400b8733da5ff3933371689bc92" prot="public" static="no">
        <type>std::map&lt; std::string, std::string &gt;</type>
        <definition>typedef std::map&lt; std::string, std::string &gt; data::node_t</definition>
        <argsstring></argsstring>
        <name>node_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/datastore.h" line="147" column="1" bodyfile="src/datastore.h" bodystart="147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="df/dea/structdata_1a6b630c97fd83ffc9a45ca139aac2c1e4" prot="public" static="no">
        <type>std::set&lt; std::string &gt;</type>
        <definition>typedef std::set&lt; std::string &gt; data::nodes_t</definition>
        <argsstring></argsstring>
        <name>nodes_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/datastore.h" line="148" column="1" bodyfile="src/datastore.h" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="df/dea/structdata_1a6f4ecdac9e16115c8361a4cda208d9c3" prot="public" static="no">
        <type>std::function&lt; void(const std::string &amp;) &gt;</type>
        <definition>typedef std::function&lt; void(const std::string&amp;) &gt; data::async_fn</definition>
        <argsstring></argsstring>
        <name>async_fn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/datastore.h" line="149" column="1" bodyfile="src/datastore.h" bodystart="149" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="df/dea/structdata_1a5a0e9f6f3afe64753354e17a2c3aba29" prot="public" static="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>typedef std::vector&lt; std::string &gt; data::command_t</definition>
        <argsstring></argsstring>
        <name>command_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/datastore.h" line="150" column="1" bodyfile="src/datastore.h" bodystart="150" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="df/dea/structdata_1ad7c44e770e55dacb9c2e62ce30fdbef4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned long</type>
        <definition>static unsigned long data::time_millis</definition>
        <argsstring>()</argsstring>
        <name>time_millis</name>
        <briefdescription>
<para>current timestamp in millis. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/datastore.h" line="153" column="1" bodyfile="src/datastore.h" bodystart="153" bodyend="157"/>
        <referencedby refid="d8/d96/classcds_1_1mod_1_1ModAlbums_1ab5f18f0ed63bbceaf6a149fcb534615e" compoundref="d5/d7b/mod__albums_8cpp" startline="34" endline="187">cds::mod::ModAlbums::import</referencedby>
        <referencedby refid="d6/dc9/classcds_1_1mod_1_1ModImages_1ae7feff1e10f8a335f27e0bdce723874a" compoundref="dc/d37/mod__images_8cpp" startline="24" endline="48">cds::mod::ModImages::import</referencedby>
        <referencedby refid="df/d63/classcds_1_1Scanner_1ad65da450bbf06bb2ad93c2293c092a1f" compoundref="d4/d77/scanner_8cpp" startline="40" endline="67">cds::Scanner::import_files</referencedby>
        <referencedby refid="df/d63/classcds_1_1Scanner_1ad2edfe5f9d7d538ed0eb52033e335793" compoundref="d4/d77/scanner_8cpp" startline="180" endline="188">cds::Scanner::flush</referencedby>
      </memberdef>
      <memberdef kind="function" id="df/dea/structdata_1a5a12735de2028ea715d62b3b41c6ce4b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string data::hash</definition>
        <argsstring>(const std::string &amp;in)</argsstring>
        <name>hash</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>in</declname>
          <briefdescription><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>string to hash. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></briefdescription>
        </param>
        <briefdescription>
<para>hash create a hash of the input string. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/datastore.h" line="159" column="1" bodyfile="src/datastore.h" bodystart="159" bodyend="167"/>
        <referencedby refid="d8/d96/classcds_1_1mod_1_1ModAlbums_1ab5f18f0ed63bbceaf6a149fcb534615e" compoundref="d5/d7b/mod__albums_8cpp" startline="34" endline="187">cds::mod::ModAlbums::import</referencedby>
        <referencedby refid="df/d63/classcds_1_1Scanner_1ad65da450bbf06bb2ad93c2293c092a1f" compoundref="d4/d77/scanner_8cpp" startline="40" endline="67">cds::Scanner::import_files</referencedby>
      </memberdef>
      <memberdef kind="function" id="df/dea/structdata_1af522b9d33db275e430e18b4725494340" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool data::is_mod</definition>
        <argsstring>(const std::string &amp;path)</argsstring>
        <name>is_mod</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>check if path is a mod path </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/datastore.h" line="224" column="1" bodyfile="src/datastore.h" bodystart="224" bodyend="231"/>
        <referencedby refid="df/d63/classcds_1_1Scanner_1ad65da450bbf06bb2ad93c2293c092a1f" compoundref="d4/d77/scanner_8cpp" startline="40" endline="67">cds::Scanner::import_files</referencedby>
      </memberdef>
      <memberdef kind="function" id="df/dea/structdata_1a64d1a0d542b5966540c6297d994c06e5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>ARGS</declname>
            <defname>ARGS</defname>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>static std::string data::make_key</definition>
        <argsstring>(const std::string &amp;prefix, const std::string &amp;value, ARGS...args)</argsstring>
        <name>make_key</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>prefix</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>value</declname>
          <briefdescription><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>prefix</parametername>
</parameternamelist>
<parameterdescription>
<para>the prefix of the string </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></briefdescription>
        </param>
        <param>
          <type>ARGS...</type>
          <declname>args</declname>
          <briefdescription><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the first value to add </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>the following tokens </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></briefdescription>
        </param>
        <briefdescription>
<para>make_key </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/datastore.h" line="235" column="1" bodyfile="src/datastore.h" bodystart="235" bodyend="242"/>
        <referencedby refid="df/dea/structdata_1a0290561be5ee3d258ea2c200d28409e9" compoundref="d9/db6/datastore_8h" startline="343" endline="358">files</referencedby>
        <referencedby refid="df/dea/structdata_1a7b097698874f8e20d4425c878c7d92bf" compoundref="d9/db6/datastore_8h" startline="417" endline="418">add_nodes</referencedby>
        <referencedby refid="df/dea/structdata_1a3e5204c13f98bbb71913d9e1078c790a" compoundref="d9/db6/datastore_8h" startline="420" endline="421">rem_nodes</referencedby>
        <referencedby refid="df/dea/structdata_1a5aa923122403f67c925102e270c37a9d" compoundref="d9/db6/datastore_8h" startline="428" endline="434">incr_mime</referencedby>
        <referencedby refid="d8/d96/classcds_1_1mod_1_1ModAlbums_1ab5f18f0ed63bbceaf6a149fcb534615e" compoundref="d5/d7b/mod__albums_8cpp" startline="34" endline="187">cds::mod::ModAlbums::import</referencedby>
        <referencedby refid="df/d63/classcds_1_1Scanner_1ad65da450bbf06bb2ad93c2293c092a1f" compoundref="d4/d77/scanner_8cpp" startline="40" endline="67">cds::Scanner::import_files</referencedby>
        <referencedby refid="de/ddd/classcds_1_1Server_1a88df24b5970ad18d427315a870e4e944" compoundref="df/dd7/server_8cpp" startline="92" endline="131">cds::Server::status</referencedby>
        <referencedby refid="de/ddd/classcds_1_1Server_1a7a2398284fc075e5325d9ae140afcdb8" compoundref="df/dd7/server_8cpp" startline="191" endline="211">cds::Server::sort</referencedby>
        <referencedby refid="de/ddd/classcds_1_1Server_1aaa29a062d4cac4928dd68a39901af02b" compoundref="df/dd7/server_8cpp" startline="394" endline="415">cds::Server::keywords</referencedby>
      </memberdef>
      <memberdef kind="function" id="df/dea/structdata_1adae832d78a0adf2a0b4abca522757126" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string data::make_key_node</definition>
        <argsstring>(const std::string &amp;key)</argsstring>
        <name>make_key_node</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
          <briefdescription><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>node key. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></briefdescription>
        </param>
        <briefdescription>
<para>make node key </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>TODO add node </para>        </inbodydescription>
        <location file="src/datastore.h" line="245" column="1" bodyfile="src/datastore.h" bodystart="245" bodyend="247"/>
        <referencedby refid="df/dea/structdata_1a547f7721fc58fce2b5c27e4c4c226fca" compoundref="d9/db6/datastore_8h" startline="274" endline="281">get</referencedby>
        <referencedby refid="df/dea/structdata_1aef2aa04f31f65b4b41620e2f0f4a97b7" compoundref="d9/db6/datastore_8h" startline="284" endline="290">set</referencedby>
        <referencedby refid="d8/d96/classcds_1_1mod_1_1ModAlbums_1ab5f18f0ed63bbceaf6a149fcb534615e" compoundref="d5/d7b/mod__albums_8cpp" startline="34" endline="187">cds::mod::ModAlbums::import</referencedby>
        <referencedby refid="df/d63/classcds_1_1Scanner_1ad65da450bbf06bb2ad93c2293c092a1f" compoundref="d4/d77/scanner_8cpp" startline="40" endline="67">cds::Scanner::import_files</referencedby>
        <referencedby refid="de/ddd/classcds_1_1Server_1a226022a43b29123d6fcb845ab5c4713d" compoundref="df/dd7/server_8cpp" startline="133" endline="156">cds::Server::node</referencedby>
      </memberdef>
      <memberdef kind="function" id="df/dea/structdata_1ac5ea539bcb81b952a3c5838379937f19" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string data::make_key_list</definition>
        <argsstring>(const std::string &amp;key)</argsstring>
        <name>make_key_list</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
          <briefdescription><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>node key. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></briefdescription>
        </param>
        <briefdescription>
<para>make type list key (fs:KEY:TYPE (SET:KEY) ) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/datastore.h" line="249" column="1" bodyfile="src/datastore.h" bodystart="249" bodyend="251"/>
        <referencedby refid="df/dea/structdata_1a3e5d28bf1fc99f5389f0eeddb348856e" compoundref="d9/db6/datastore_8h" startline="403" endline="404">add_types</referencedby>
        <referencedby refid="df/dea/structdata_1a1ca7fdb881f181131b61e9429e9c83ec" compoundref="d9/db6/datastore_8h" startline="406" endline="407">rem_types</referencedby>
        <referencedby refid="df/dea/structdata_1af449933948671c86a051c08d4876ede4" compoundref="d9/db6/datastore_8h" startline="410" endline="411">add_nodes</referencedby>
        <referencedby refid="df/dea/structdata_1a659e370f3ef17b04342b89e8a353cd19" compoundref="d9/db6/datastore_8h" startline="413" endline="414">rem_nodes</referencedby>
        <referencedby refid="d8/d96/classcds_1_1mod_1_1ModAlbums_1ab5f18f0ed63bbceaf6a149fcb534615e" compoundref="d5/d7b/mod__albums_8cpp" startline="34" endline="187">cds::mod::ModAlbums::import</referencedby>
      </memberdef>
      <memberdef kind="function" id="df/dea/structdata_1a57cb94d6ace56a28c6e2749a73ed2773" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string data::make_key_list</definition>
        <argsstring>(const NodeType::Enum &amp;type)</argsstring>
        <name>make_key_list</name>
        <param>
          <type>const NodeType::Enum &amp;</type>
          <declname>type</declname>
          <briefdescription><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>node type. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></briefdescription>
        </param>
        <briefdescription>
<para>make node list key (fs:TYPE:list (SET:KEY) ) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/datastore.h" line="253" column="1" bodyfile="src/datastore.h" bodystart="253" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="df/dea/structdata_1ae94130e0ed9b83456766145fb3c1c562" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>redis_ptr</type>
        <definition>static redis_ptr data::make_connection</definition>
        <argsstring>(const std::string db, int port)</argsstring>
        <name>make_connection</name>
        <param>
          <type>const std::string</type>
          <declname>db</declname>
          <briefdescription><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>db</parametername>
</parameternamelist>
<parameterdescription>
<para>database host </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>port</declname>
          <briefdescription><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>database port </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></briefdescription>
        </param>
        <briefdescription>
<para>create new database connection. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/datastore.h" line="262" column="1" bodyfile="src/datastore.h" bodystart="262" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="df/dea/structdata_1a547f7721fc58fce2b5c27e4c4c226fca" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string data::get</definition>
        <argsstring>(redis_ptr redis, const std::string &amp;key, const std::string param)</argsstring>
        <name>get</name>
        <param>
          <type>redis_ptr</type>
          <declname>redis</declname>
          <briefdescription><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>redis</parametername>
</parameternamelist>
<parameterdescription>
<para>the database pointer. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></briefdescription>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
          <briefdescription><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>redis key. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></briefdescription>
        </param>
        <param>
          <type>const std::string</type>
          <declname>param</declname>
          <briefdescription><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>param</parametername>
</parameternamelist>
<parameterdescription>
<para>parameter name. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></briefdescription>
        </param>
        <briefdescription>
<para>get the node attribute value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para><simplesect kind="return"><para>the the value or empty string if not found. </para></simplesect>
</para>        </inbodydescription>
        <location file="src/datastore.h" line="274" column="1" bodyfile="src/datastore.h" bodystart="274" bodyend="281"/>
        <references refid="df/dea/structdata_1adae832d78a0adf2a0b4abca522757126" compoundref="d9/db6/datastore_8h" startline="245" endline="247">make_key_node</references>
        <referencedby refid="d6/dc9/classcds_1_1mod_1_1ModImages_1ae7feff1e10f8a335f27e0bdce723874a" compoundref="dc/d37/mod__images_8cpp" startline="24" endline="48">cds::mod::ModImages::import</referencedby>
        <referencedby refid="df/d63/classcds_1_1Scanner_1ad65da450bbf06bb2ad93c2293c092a1f" compoundref="d4/d77/scanner_8cpp" startline="40" endline="67">cds::Scanner::import_files</referencedby>
        <referencedby refid="df/d63/classcds_1_1Scanner_1ad2edfe5f9d7d538ed0eb52033e335793" compoundref="d4/d77/scanner_8cpp" startline="180" endline="188">cds::Scanner::flush</referencedby>
        <referencedby refid="de/ddd/classcds_1_1Server_1ad5fb8a933d0110b1983df7e97c82a63d" compoundref="df/dd7/server_8cpp" startline="158" endline="189">cds::Server::path</referencedby>
      </memberdef>
      <memberdef kind="function" id="df/dea/structdata_1aef2aa04f31f65b4b41620e2f0f4a97b7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void data::set</definition>
        <argsstring>(redis_ptr redis, const std::string &amp;key, const std::string param, const std::string value)</argsstring>
        <name>set</name>
        <param>
          <type>redis_ptr</type>
          <declname>redis</declname>
          <briefdescription><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>redis</parametername>
</parameternamelist>
<parameterdescription>
<para>the database pointer. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></briefdescription>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
          <briefdescription><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>redis key. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></briefdescription>
        </param>
        <param>
          <type>const std::string</type>
          <declname>param</declname>
          <briefdescription><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>param</parametername>
</parameternamelist>
<parameterdescription>
<para>parameter name. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></briefdescription>
        </param>
        <param>
          <type>const std::string</type>
          <declname>value</declname>
          <briefdescription><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>parameter value. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></briefdescription>
        </param>
        <briefdescription>
<para>set the node attribute value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/datastore.h" line="284" column="1" bodyfile="src/datastore.h" bodystart="284" bodyend="290"/>
        <references refid="df/dea/structdata_1adae832d78a0adf2a0b4abca522757126" compoundref="d9/db6/datastore_8h" startline="245" endline="247">make_key_node</references>
        <referencedby refid="d8/d96/classcds_1_1mod_1_1ModAlbums_1ab5f18f0ed63bbceaf6a149fcb534615e" compoundref="d5/d7b/mod__albums_8cpp" startline="34" endline="187">cds::mod::ModAlbums::import</referencedby>
      </memberdef>
      <memberdef kind="function" id="df/dea/structdata_1a8cfbc54186127ff485d7d1464f6388cd" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void data::save</definition>
        <argsstring>(redis_ptr redis, const std::string &amp;key, const node_t &amp;node)</argsstring>
        <name>save</name>
        <param>
          <type>redis_ptr</type>
          <declname>redis</declname>
          <briefdescription><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>redis</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to redis database. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></briefdescription>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
          <briefdescription><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>key of the object to store. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></briefdescription>
        </param>
        <param>
          <type>const node_t &amp;</type>
          <declname>node</declname>
          <briefdescription><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>the node values to store. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></briefdescription>
        </param>
        <briefdescription>
<para>store the node in redis. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/datastore.h" line="293" column="1" bodyfile="src/datastore.h" bodystart="293" bodyend="302"/>
        <referencedby refid="d8/d96/classcds_1_1mod_1_1ModAlbums_1ab5f18f0ed63bbceaf6a149fcb534615e" compoundref="d5/d7b/mod__albums_8cpp" startline="34" endline="187">cds::mod::ModAlbums::import</referencedby>
        <referencedby refid="d6/dc9/classcds_1_1mod_1_1ModImages_1ae7feff1e10f8a335f27e0bdce723874a" compoundref="dc/d37/mod__images_8cpp" startline="24" endline="48">cds::mod::ModImages::import</referencedby>
        <referencedby refid="df/d63/classcds_1_1Scanner_1ad65da450bbf06bb2ad93c2293c092a1f" compoundref="d4/d77/scanner_8cpp" startline="40" endline="67">cds::Scanner::import_files</referencedby>
        <referencedby refid="df/d63/classcds_1_1Scanner_1ad2edfe5f9d7d538ed0eb52033e335793" compoundref="d4/d77/scanner_8cpp" startline="180" endline="188">cds::Scanner::flush</referencedby>
      </memberdef>
      <memberdef kind="function" id="df/dea/structdata_1a2767cb86aa09c29a549ab449809ec812" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>node_t</type>
        <definition>static node_t data::node</definition>
        <argsstring>(redis_ptr redis, const std::string &amp;key)</argsstring>
        <name>node</name>
        <param>
          <type>redis_ptr</type>
          <declname>redis</declname>
          <briefdescription><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>redis</parametername>
</parameternamelist>
<parameterdescription>
<para>redis database pointer. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></briefdescription>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
          <briefdescription><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>the node key. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></briefdescription>
        </param>
        <briefdescription>
<para>get the node by key </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para><simplesect kind="return"><para>the the node or empty map if not found. </para></simplesect>
</para>        </inbodydescription>
        <location file="src/datastore.h" line="305" column="1" bodyfile="src/datastore.h" bodystart="305" bodyend="311"/>
        <referencedby refid="d8/d96/classcds_1_1mod_1_1ModAlbums_1ab5f18f0ed63bbceaf6a149fcb534615e" compoundref="d5/d7b/mod__albums_8cpp" startline="34" endline="187">cds::mod::ModAlbums::import</referencedby>
        <referencedby refid="d6/dc9/classcds_1_1mod_1_1ModImages_1ae7feff1e10f8a335f27e0bdce723874a" compoundref="dc/d37/mod__images_8cpp" startline="24" endline="48">cds::mod::ModImages::import</referencedby>
        <referencedby refid="de/ddd/classcds_1_1Server_1a2ee5708b9f35871a311feb06fa43a0e1" compoundref="df/dd7/server_8cpp" startline="213" endline="266">cds::Server::nodes</referencedby>
        <referencedby refid="de/ddd/classcds_1_1Server_1a8d0f5fcc6bb289bd3d2a1a2df2298e9b" compoundref="df/dd7/server_8cpp" startline="268" endline="317">cds::Server::files</referencedby>
      </memberdef>
      <memberdef kind="function" id="df/dea/structdata_1aeafb3837ce1e2fbfea65c76431ef4fb8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void data::children</definition>
        <argsstring>(redis_ptr redis, const std::string &amp;key, const int &amp;index, const int &amp;count, const std::string &amp;sort, const std::string &amp;order, const std::string &amp;filter, async_fn fn)</argsstring>
        <name>children</name>
        <param>
          <type>redis_ptr</type>
          <declname>redis</declname>
          <briefdescription><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>redis</parametername>
</parameternamelist>
<parameterdescription>
<para>redis database pointer. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></briefdescription>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
          <briefdescription><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>the node key. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></briefdescription>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>index</declname>
          <briefdescription><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>start index. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></briefdescription>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>count</declname>
          <briefdescription><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>result size. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></briefdescription>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>sort</declname>
          <briefdescription><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sort</parametername>
</parameternamelist>
<parameterdescription>
<para>sort results [alpha, timestamp]. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></briefdescription>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>order</declname>
          <briefdescription><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>order</parametername>
</parameternamelist>
<parameterdescription>
<para>order the results [asc, desc]. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></briefdescription>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>filter</declname>
          <briefdescription><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filter</parametername>
</parameternamelist>
<parameterdescription>
<para>filter results by keyword. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></briefdescription>
        </param>
        <param>
          <type>async_fn</type>
          <declname>fn</declname>
          <briefdescription><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fn</parametername>
</parameternamelist>
<parameterdescription>
<para>the callback function. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></briefdescription>
        </param>
        <briefdescription>
<para>get the node children </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/datastore.h" line="314" column="1" bodyfile="src/datastore.h" bodystart="314" bodyend="340"/>
        <referencedby refid="d8/d96/classcds_1_1mod_1_1ModAlbums_1ab5f18f0ed63bbceaf6a149fcb534615e" compoundref="d5/d7b/mod__albums_8cpp" startline="34" endline="187">cds::mod::ModAlbums::import</referencedby>
        <referencedby refid="df/d63/classcds_1_1Scanner_1ad65da450bbf06bb2ad93c2293c092a1f" compoundref="d4/d77/scanner_8cpp" startline="40" endline="67">cds::Scanner::import_files</referencedby>
        <referencedby refid="df/d63/classcds_1_1Scanner_1ad2edfe5f9d7d538ed0eb52033e335793" compoundref="d4/d77/scanner_8cpp" startline="180" endline="188">cds::Scanner::flush</referencedby>
        <referencedby refid="de/ddd/classcds_1_1Server_1a2ee5708b9f35871a311feb06fa43a0e1" compoundref="df/dd7/server_8cpp" startline="213" endline="266">cds::Server::nodes</referencedby>
        <referencedby refid="de/ddd/classcds_1_1Server_1a8d0f5fcc6bb289bd3d2a1a2df2298e9b" compoundref="df/dd7/server_8cpp" startline="268" endline="317">cds::Server::files</referencedby>
      </memberdef>
      <memberdef kind="function" id="df/dea/structdata_1a0290561be5ee3d258ea2c200d28409e9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void data::files</definition>
        <argsstring>(redis_ptr redis, const std::string &amp;key, const NodeType::Enum type, const int &amp;index, const int &amp;count, async_fn fn)</argsstring>
        <name>files</name>
        <param>
          <type>redis_ptr</type>
          <declname>redis</declname>
          <briefdescription><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>redis</parametername>
</parameternamelist>
<parameterdescription>
<para>redis database pointer. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></briefdescription>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
          <briefdescription><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>the file key. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></briefdescription>
        </param>
        <param>
          <type>const NodeType::Enum</type>
          <declname>type</declname>
          <briefdescription><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>the file type. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></briefdescription>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>index</declname>
          <briefdescription><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>start index. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></briefdescription>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>count</declname>
          <briefdescription><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>result size. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></briefdescription>
        </param>
        <param>
          <type>async_fn</type>
          <declname>fn</declname>
          <briefdescription><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fn</parametername>
</parameternamelist>
<parameterdescription>
<para>the callback function. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></briefdescription>
        </param>
        <briefdescription>
<para>get the node files by type </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>TODO </para>        </inbodydescription>
        <location file="src/datastore.h" line="343" column="1" bodyfile="src/datastore.h" bodystart="343" bodyend="358"/>
        <references refid="df/dea/structdata_1a64d1a0d542b5966540c6297d994c06e5" compoundref="d9/db6/datastore_8h" startline="235" endline="242">make_key</references>
        <referencedby refid="de/ddd/classcds_1_1Server_1a8d0f5fcc6bb289bd3d2a1a2df2298e9b" compoundref="df/dd7/server_8cpp" startline="268" endline="317">cds::Server::files</referencedby>
      </memberdef>
      <memberdef kind="function" id="df/dea/structdata_1a15bde8b9a65b4e748f4880b6ed75eea2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int data::children_count</definition>
        <argsstring>(redis_ptr redis, const std::string &amp;key)</argsstring>
        <name>children_count</name>
        <param>
          <type>redis_ptr</type>
          <declname>redis</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>get the node children count </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/datastore.h" line="361" column="1" bodyfile="src/datastore.h" bodystart="361" bodyend="366"/>
        <referencedby refid="de/ddd/classcds_1_1Server_1a88df24b5970ad18d427315a870e4e944" compoundref="df/dd7/server_8cpp" startline="92" endline="131">cds::Server::status</referencedby>
        <referencedby refid="de/ddd/classcds_1_1Server_1a2ee5708b9f35871a311feb06fa43a0e1" compoundref="df/dd7/server_8cpp" startline="213" endline="266">cds::Server::nodes</referencedby>
      </memberdef>
      <memberdef kind="function" id="df/dea/structdata_1a5630966d8b25205277ba680e158956b5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int data::files_count</definition>
        <argsstring>(redis_ptr redis, const std::string &amp;key, const NodeType::Enum type)</argsstring>
        <name>files_count</name>
        <param>
          <type>redis_ptr</type>
          <declname>redis</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const NodeType::Enum</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>get the node children count </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/datastore.h" line="369" column="1" bodyfile="src/datastore.h" bodystart="369" bodyend="374"/>
        <referencedby refid="de/ddd/classcds_1_1Server_1a8d0f5fcc6bb289bd3d2a1a2df2298e9b" compoundref="df/dd7/server_8cpp" startline="268" endline="317">cds::Server::files</referencedby>
      </memberdef>
      <memberdef kind="function" id="df/dea/structdata_1aed37180149542e4f1d61f376cc57168c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void data::add_tag</definition>
        <argsstring>(redis_ptr redis, const std::string &amp;name, const std::string &amp;keyword, const NodeType::Enum &amp;type, const std::string &amp;node, float score)</argsstring>
        <name>add_tag</name>
        <param>
          <type>redis_ptr</type>
          <declname>redis</declname>
          <briefdescription><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>redis</parametername>
</parameternamelist>
<parameterdescription>
<para>redis database pointer. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></briefdescription>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
          <briefdescription><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the tag </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></briefdescription>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>keyword</declname>
          <briefdescription><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>keyword</parametername>
</parameternamelist>
<parameterdescription>
<para>the tag </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></briefdescription>
        </param>
        <param>
          <type>const NodeType::Enum &amp;</type>
          <declname>type</declname>
          <briefdescription><para>TODO remove <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>the type for the tag </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></briefdescription>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>node</declname>
          <briefdescription><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>the node key </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></briefdescription>
        </param>
        <param>
          <type>float</type>
          <declname>score</declname>
          <briefdescription><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>score</parametername>
</parameternamelist>
<parameterdescription>
<para>the score of the node index </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></briefdescription>
        </param>
        <briefdescription>
<para>create a new tag. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/datastore.h" line="377" column="1" bodyfile="src/datastore.h" bodystart="377" bodyend="387"/>
        <referencedby refid="d8/d96/classcds_1_1mod_1_1ModAlbums_1ab5f18f0ed63bbceaf6a149fcb534615e" compoundref="d5/d7b/mod__albums_8cpp" startline="34" endline="187">cds::mod::ModAlbums::import</referencedby>
        <referencedby refid="d6/dc9/classcds_1_1mod_1_1ModImages_1ae7feff1e10f8a335f27e0bdce723874a" compoundref="dc/d37/mod__images_8cpp" startline="24" endline="48">cds::mod::ModImages::import</referencedby>
      </memberdef>
      <memberdef kind="function" id="df/dea/structdata_1ab9369687e5b0247b92fa21cd6650324a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>ARGS</declname>
            <defname>ARGS</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void data::eval</definition>
        <argsstring>(redis_ptr redis, const std::string &amp;script, int argc, ARGS...argv)</argsstring>
        <name>eval</name>
        <param>
          <type>redis_ptr</type>
          <declname>redis</declname>
          <briefdescription><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>redis</parametername>
</parameternamelist>
<parameterdescription>
<para>the database pointer. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></briefdescription>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>script</declname>
        </param>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>ARGS...</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
<para>evaluate the lua script. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/datastore.h" line="391" column="1" bodyfile="src/datastore.h" bodystart="391" bodyend="396"/>
        <referencedby refid="df/d63/classcds_1_1Scanner_1ad65da450bbf06bb2ad93c2293c092a1f" compoundref="d4/d77/scanner_8cpp" startline="40" endline="67">cds::Scanner::import_files</referencedby>
        <referencedby refid="df/d63/classcds_1_1Scanner_1ad2edfe5f9d7d538ed0eb52033e335793" compoundref="d4/d77/scanner_8cpp" startline="180" endline="188">cds::Scanner::flush</referencedby>
      </memberdef>
      <memberdef kind="function" id="df/dea/structdata_1a3e5d28bf1fc99f5389f0eeddb348856e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void data::add_types</definition>
        <argsstring>(redis_ptr redis, const std::string &amp;path, const std::string &amp;key, const unsigned long &amp;score)</argsstring>
        <name>add_types</name>
        <param>
          <type>redis_ptr</type>
          <declname>redis</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>score</declname>
        </param>
        <briefdescription>
<para>add node to parents type list </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/datastore.h" line="403" column="1" bodyfile="src/datastore.h" bodystart="403" bodyend="404"/>
        <references refid="df/dea/structdata_1ac5ea539bcb81b952a3c5838379937f19" compoundref="d9/db6/datastore_8h" startline="249" endline="251">make_key_list</references>
        <referencedby refid="d8/d96/classcds_1_1mod_1_1ModAlbums_1ab5f18f0ed63bbceaf6a149fcb534615e" compoundref="d5/d7b/mod__albums_8cpp" startline="34" endline="187">cds::mod::ModAlbums::import</referencedby>
        <referencedby refid="df/d63/classcds_1_1Scanner_1ad65da450bbf06bb2ad93c2293c092a1f" compoundref="d4/d77/scanner_8cpp" startline="40" endline="67">cds::Scanner::import_files</referencedby>
        <referencedby refid="df/d63/classcds_1_1Scanner_1ad2edfe5f9d7d538ed0eb52033e335793" compoundref="d4/d77/scanner_8cpp" startline="180" endline="188">cds::Scanner::flush</referencedby>
      </memberdef>
      <memberdef kind="function" id="df/dea/structdata_1a1ca7fdb881f181131b61e9429e9c83ec" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void data::rem_types</definition>
        <argsstring>(redis_ptr redis, const std::string &amp;parent, const std::string &amp;key)</argsstring>
        <name>rem_types</name>
        <param>
          <type>redis_ptr</type>
          <declname>redis</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>parent</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>remove node from parents type list </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/datastore.h" line="406" column="1" bodyfile="src/datastore.h" bodystart="406" bodyend="407"/>
        <references refid="df/dea/structdata_1ac5ea539bcb81b952a3c5838379937f19" compoundref="d9/db6/datastore_8h" startline="249" endline="251">make_key_list</references>
        <referencedby refid="d8/d96/classcds_1_1mod_1_1ModAlbums_1ab5f18f0ed63bbceaf6a149fcb534615e" compoundref="d5/d7b/mod__albums_8cpp" startline="34" endline="187">cds::mod::ModAlbums::import</referencedby>
        <referencedby refid="df/d63/classcds_1_1Scanner_1ad65da450bbf06bb2ad93c2293c092a1f" compoundref="d4/d77/scanner_8cpp" startline="40" endline="67">cds::Scanner::import_files</referencedby>
      </memberdef>
      <memberdef kind="function" id="df/dea/structdata_1af449933948671c86a051c08d4876ede4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void data::add_nodes</definition>
        <argsstring>(redis_ptr redis, NodeType::Enum type, const std::string &amp;key, unsigned long score)</argsstring>
        <name>add_nodes</name>
        <param>
          <type>redis_ptr</type>
          <declname>redis</declname>
        </param>
        <param>
          <type>NodeType::Enum</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>score</declname>
        </param>
        <briefdescription>
<para>add node to global nodes list </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/datastore.h" line="410" column="1" bodyfile="src/datastore.h" bodystart="410" bodyend="411"/>
        <references refid="df/dea/structdata_1ac5ea539bcb81b952a3c5838379937f19" compoundref="d9/db6/datastore_8h" startline="249" endline="251">make_key_list</references>
        <referencedby refid="d8/d96/classcds_1_1mod_1_1ModAlbums_1ab5f18f0ed63bbceaf6a149fcb534615e" compoundref="d5/d7b/mod__albums_8cpp" startline="34" endline="187">cds::mod::ModAlbums::import</referencedby>
        <referencedby refid="d6/dc9/classcds_1_1mod_1_1ModImages_1ae7feff1e10f8a335f27e0bdce723874a" compoundref="dc/d37/mod__images_8cpp" startline="24" endline="48">cds::mod::ModImages::import</referencedby>
        <referencedby refid="df/d63/classcds_1_1Scanner_1ad65da450bbf06bb2ad93c2293c092a1f" compoundref="d4/d77/scanner_8cpp" startline="40" endline="67">cds::Scanner::import_files</referencedby>
      </memberdef>
      <memberdef kind="function" id="df/dea/structdata_1a659e370f3ef17b04342b89e8a353cd19" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void data::rem_nodes</definition>
        <argsstring>(redis_ptr redis, NodeType::Enum type, const std::string &amp;key)</argsstring>
        <name>rem_nodes</name>
        <param>
          <type>redis_ptr</type>
          <declname>redis</declname>
        </param>
        <param>
          <type>NodeType::Enum</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>remove node from global nodes list </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/datastore.h" line="413" column="1" bodyfile="src/datastore.h" bodystart="413" bodyend="414"/>
        <references refid="df/dea/structdata_1ac5ea539bcb81b952a3c5838379937f19" compoundref="d9/db6/datastore_8h" startline="249" endline="251">make_key_list</references>
        <referencedby refid="d8/d96/classcds_1_1mod_1_1ModAlbums_1ab5f18f0ed63bbceaf6a149fcb534615e" compoundref="d5/d7b/mod__albums_8cpp" startline="34" endline="187">cds::mod::ModAlbums::import</referencedby>
        <referencedby refid="df/d63/classcds_1_1Scanner_1ad65da450bbf06bb2ad93c2293c092a1f" compoundref="d4/d77/scanner_8cpp" startline="40" endline="67">cds::Scanner::import_files</referencedby>
      </memberdef>
      <memberdef kind="function" id="df/dea/structdata_1a7b097698874f8e20d4425c878c7d92bf" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void data::add_nodes</definition>
        <argsstring>(redis_ptr redis, const std::string &amp;parent, const NodeType::Enum type, const std::string &amp;key, unsigned long score)</argsstring>
        <name>add_nodes</name>
        <param>
          <type>redis_ptr</type>
          <declname>redis</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>parent</declname>
        </param>
        <param>
          <type>const NodeType::Enum</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>score</declname>
        </param>
        <briefdescription>
<para>add node to global nodes list </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/datastore.h" line="417" column="1" bodyfile="src/datastore.h" bodystart="417" bodyend="418"/>
        <references refid="df/dea/structdata_1a64d1a0d542b5966540c6297d994c06e5" compoundref="d9/db6/datastore_8h" startline="235" endline="242">make_key</references>
      </memberdef>
      <memberdef kind="function" id="df/dea/structdata_1a3e5204c13f98bbb71913d9e1078c790a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void data::rem_nodes</definition>
        <argsstring>(redis_ptr redis, const std::string &amp;parent, const NodeType::Enum type, const std::string &amp;key)</argsstring>
        <name>rem_nodes</name>
        <param>
          <type>redis_ptr</type>
          <declname>redis</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>parent</declname>
        </param>
        <param>
          <type>const NodeType::Enum</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>remove node from global nodes list </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/datastore.h" line="420" column="1" bodyfile="src/datastore.h" bodystart="420" bodyend="421"/>
        <references refid="df/dea/structdata_1a64d1a0d542b5966540c6297d994c06e5" compoundref="d9/db6/datastore_8h" startline="235" endline="242">make_key</references>
      </memberdef>
      <memberdef kind="function" id="df/dea/structdata_1a5aa923122403f67c925102e270c37a9d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void data::incr_mime</definition>
        <argsstring>(data::redis_ptr redis, const std::string &amp;mime_type)</argsstring>
        <name>incr_mime</name>
        <param>
          <type>data::redis_ptr</type>
          <declname>redis</declname>
          <briefdescription><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>redis</parametername>
</parameternamelist>
<parameterdescription>
<para>redis database pointer. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></briefdescription>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>mime_type</declname>
          <briefdescription><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mime_type</parametername>
</parameternamelist>
<parameterdescription>
<para>the mime type. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></briefdescription>
        </param>
        <briefdescription>
<para>add mime type to list and increment mime counter. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/datastore.h" line="428" column="1" bodyfile="src/datastore.h" bodystart="428" bodyend="434"/>
        <references refid="df/dea/structdata_1a64d1a0d542b5966540c6297d994c06e5" compoundref="d9/db6/datastore_8h" startline="235" endline="242">make_key</references>
        <referencedby refid="df/d63/classcds_1_1Scanner_1ad65da450bbf06bb2ad93c2293c092a1f" compoundref="d4/d77/scanner_8cpp" startline="40" endline="67">cds::Scanner::import_files</referencedby>
      </memberdef>
      <memberdef kind="function" id="df/dea/structdata_1a2e667bbfd4a9d1abeff95eadfd91a9c8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string data::config</definition>
        <argsstring>(redis_ptr redis)</argsstring>
        <name>config</name>
        <param>
          <type>redis_ptr</type>
          <declname>redis</declname>
          <briefdescription><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>redis</parametername>
</parameternamelist>
<parameterdescription>
<para>redox database. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></briefdescription>
        </param>
        <briefdescription>
<para>get the configuration as json string from the database. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/datastore.h" line="441" column="1" bodyfile="src/datastore.h" bodystart="441" bodyend="443"/>
        <referencedby refid="de/ddd/classcds_1_1Server_1aa86c23ba2b8426c67da83d1d69306569" compoundref="df/dd7/server_8cpp" startline="73" endline="78">cds::Server::config</referencedby>
      </memberdef>
      <memberdef kind="function" id="df/dea/structdata_1a73c2d6a82c4be44a10c2dcce64241c47" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void data::config</definition>
        <argsstring>(redis_ptr redis, const std::string &amp;json)</argsstring>
        <name>config</name>
        <param>
          <type>redis_ptr</type>
          <declname>redis</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>json</declname>
          <briefdescription><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>redis</parametername>
</parameternamelist>
<parameterdescription>
<para>redox database. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>the configuration as json string. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></briefdescription>
        </param>
        <briefdescription>
<para>store the configuration as json string in the database. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/datastore.h" line="445" column="1" bodyfile="src/datastore.h" bodystart="445" bodyend="448"/>
      </memberdef>
      <memberdef kind="function" id="df/dea/structdata_1ac0cfd0fa39bc3e3bdbd32e08289ddaea" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool data::config_exists</definition>
        <argsstring>(redis_ptr redis)</argsstring>
        <name>config_exists</name>
        <param>
          <type>redis_ptr</type>
          <declname>redis</declname>
          <briefdescription><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>redis</parametername>
</parameternamelist>
<parameterdescription>
<para>redox database pointer. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></briefdescription>
        </param>
        <briefdescription>
<para>check if a configuration exists in the database. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/datastore.h" line="450" column="1" bodyfile="src/datastore.h" bodystart="450" bodyend="453"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="df/dea/structdata_1a1cf2a3cc9f3778e8c3c0b676631ca974" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void data::__iterate_key</definition>
        <argsstring>(std::string &amp;key, const std::string &amp;value)</argsstring>
        <name>__iterate_key</name>
        <param>
          <type>std::string &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/datastore.h" line="456" column="1" bodyfile="src/datastore.h" bodystart="456" bodyend="461"/>
      </memberdef>
      <memberdef kind="function" id="df/dea/structdata_1addc9f88ae9ca3edab036171238a13ef9" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>ARGS</declname>
            <defname>ARGS</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void data::__iterate_key</definition>
        <argsstring>(std::string &amp;key, const std::string &amp;value, ARGS...args)</argsstring>
        <name>__iterate_key</name>
        <param>
          <type>std::string &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>ARGS...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/datastore.h" line="463" column="1" bodyfile="src/datastore.h" bodystart="463" bodyend="470"/>
      </memberdef>
      <memberdef kind="function" id="df/dea/structdata_1a3007d494c14ec84997f9e70c75c9ec36" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::map&lt; std::string, std::string &gt;</type>
        <definition>static std::map&lt; std::string, std::string &gt; data::to_map</definition>
        <argsstring>(command_t in)</argsstring>
        <name>to_map</name>
        <param>
          <type>command_t</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/datastore.h" line="472" column="1" bodyfile="src/datastore.h" bodystart="472" bodyend="479"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="df/dea/structdata_1a07b86f952d91272a52885573847aaa62" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>data::FRIEND_TEST</definition>
        <argsstring>(DatastoreTest, to_map)</argsstring>
        <name>FRIEND_TEST</name>
        <param>
          <type>DatastoreTest</type>
        </param>
        <param>
          <type>to_map</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/datastore.h" line="471" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Read and write CDS data in redis. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/datastore.h" line="144" column="1" bodyfile="src/datastore.h" bodystart="144" bodyend="480"/>
    <listofallmembers>
      <member refid="df/dea/structdata_1a1cf2a3cc9f3778e8c3c0b676631ca974" prot="private" virt="non-virtual"><scope>data</scope><name>__iterate_key</name></member>
      <member refid="df/dea/structdata_1addc9f88ae9ca3edab036171238a13ef9" prot="private" virt="non-virtual"><scope>data</scope><name>__iterate_key</name></member>
      <member refid="df/dea/structdata_1af449933948671c86a051c08d4876ede4" prot="public" virt="non-virtual"><scope>data</scope><name>add_nodes</name></member>
      <member refid="df/dea/structdata_1a7b097698874f8e20d4425c878c7d92bf" prot="public" virt="non-virtual"><scope>data</scope><name>add_nodes</name></member>
      <member refid="df/dea/structdata_1aed37180149542e4f1d61f376cc57168c" prot="public" virt="non-virtual"><scope>data</scope><name>add_tag</name></member>
      <member refid="df/dea/structdata_1a3e5d28bf1fc99f5389f0eeddb348856e" prot="public" virt="non-virtual"><scope>data</scope><name>add_types</name></member>
      <member refid="df/dea/structdata_1a6f4ecdac9e16115c8361a4cda208d9c3" prot="public" virt="non-virtual"><scope>data</scope><name>async_fn</name></member>
      <member refid="df/dea/structdata_1aeafb3837ce1e2fbfea65c76431ef4fb8" prot="public" virt="non-virtual"><scope>data</scope><name>children</name></member>
      <member refid="df/dea/structdata_1a15bde8b9a65b4e748f4880b6ed75eea2" prot="public" virt="non-virtual"><scope>data</scope><name>children_count</name></member>
      <member refid="df/dea/structdata_1a5a0e9f6f3afe64753354e17a2c3aba29" prot="public" virt="non-virtual"><scope>data</scope><name>command_t</name></member>
      <member refid="df/dea/structdata_1a2e667bbfd4a9d1abeff95eadfd91a9c8" prot="public" virt="non-virtual"><scope>data</scope><name>config</name></member>
      <member refid="df/dea/structdata_1a73c2d6a82c4be44a10c2dcce64241c47" prot="public" virt="non-virtual"><scope>data</scope><name>config</name></member>
      <member refid="df/dea/structdata_1ac0cfd0fa39bc3e3bdbd32e08289ddaea" prot="public" virt="non-virtual"><scope>data</scope><name>config_exists</name></member>
      <member refid="df/dea/structdata_1ab9369687e5b0247b92fa21cd6650324a" prot="public" virt="non-virtual"><scope>data</scope><name>eval</name></member>
      <member refid="df/dea/structdata_1a0290561be5ee3d258ea2c200d28409e9" prot="public" virt="non-virtual"><scope>data</scope><name>files</name></member>
      <member refid="df/dea/structdata_1a5630966d8b25205277ba680e158956b5" prot="public" virt="non-virtual"><scope>data</scope><name>files_count</name></member>
      <member refid="df/dea/structdata_1a07b86f952d91272a52885573847aaa62" prot="private" virt="non-virtual"><scope>data</scope><name>FRIEND_TEST</name></member>
      <member refid="df/dea/structdata_1a547f7721fc58fce2b5c27e4c4c226fca" prot="public" virt="non-virtual"><scope>data</scope><name>get</name></member>
      <member refid="df/dea/structdata_1a5a12735de2028ea715d62b3b41c6ce4b" prot="public" virt="non-virtual"><scope>data</scope><name>hash</name></member>
      <member refid="df/dea/structdata_1a5aa923122403f67c925102e270c37a9d" prot="public" virt="non-virtual"><scope>data</scope><name>incr_mime</name></member>
      <member refid="df/dea/structdata_1af522b9d33db275e430e18b4725494340" prot="public" virt="non-virtual"><scope>data</scope><name>is_mod</name></member>
      <member refid="df/dea/structdata_1ae94130e0ed9b83456766145fb3c1c562" prot="public" virt="non-virtual"><scope>data</scope><name>make_connection</name></member>
      <member refid="df/dea/structdata_1a64d1a0d542b5966540c6297d994c06e5" prot="public" virt="non-virtual"><scope>data</scope><name>make_key</name></member>
      <member refid="df/dea/structdata_1ac5ea539bcb81b952a3c5838379937f19" prot="public" virt="non-virtual"><scope>data</scope><name>make_key_list</name></member>
      <member refid="df/dea/structdata_1a57cb94d6ace56a28c6e2749a73ed2773" prot="public" virt="non-virtual"><scope>data</scope><name>make_key_list</name></member>
      <member refid="df/dea/structdata_1adae832d78a0adf2a0b4abca522757126" prot="public" virt="non-virtual"><scope>data</scope><name>make_key_node</name></member>
      <member refid="df/dea/structdata_1a2767cb86aa09c29a549ab449809ec812" prot="public" virt="non-virtual"><scope>data</scope><name>node</name></member>
      <member refid="df/dea/structdata_1a28210400b8733da5ff3933371689bc92" prot="public" virt="non-virtual"><scope>data</scope><name>node_t</name></member>
      <member refid="df/dea/structdata_1a6b630c97fd83ffc9a45ca139aac2c1e4" prot="public" virt="non-virtual"><scope>data</scope><name>nodes_t</name></member>
      <member refid="df/dea/structdata_1a766c39ffada2f9e21fa1fa011160a0d3" prot="public" virt="non-virtual"><scope>data</scope><name>redis_ptr</name></member>
      <member refid="df/dea/structdata_1a659e370f3ef17b04342b89e8a353cd19" prot="public" virt="non-virtual"><scope>data</scope><name>rem_nodes</name></member>
      <member refid="df/dea/structdata_1a3e5204c13f98bbb71913d9e1078c790a" prot="public" virt="non-virtual"><scope>data</scope><name>rem_nodes</name></member>
      <member refid="df/dea/structdata_1a1ca7fdb881f181131b61e9429e9c83ec" prot="public" virt="non-virtual"><scope>data</scope><name>rem_types</name></member>
      <member refid="df/dea/structdata_1a8cfbc54186127ff485d7d1464f6388cd" prot="public" virt="non-virtual"><scope>data</scope><name>save</name></member>
      <member refid="df/dea/structdata_1aef2aa04f31f65b4b41620e2f0f4a97b7" prot="public" virt="non-virtual"><scope>data</scope><name>set</name></member>
      <member refid="df/dea/structdata_1ad7c44e770e55dacb9c2e62ce30fdbef4" prot="public" virt="non-virtual"><scope>data</scope><name>time_millis</name></member>
      <member refid="df/dea/structdata_1a3007d494c14ec84997f9e70c75c9ec36" prot="private" virt="non-virtual"><scope>data</scope><name>to_map</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
