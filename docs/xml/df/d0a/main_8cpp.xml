<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="df/d0a/main_8cpp" kind="file" language="C++">
    <compoundname>main.cpp</compoundname>
    <includes local="no">iostream</includes>
    <includes local="no">string</includes>
    <includes local="no">vector</includes>
    <includes local="yes">cxxopts.hpp</includes>
    <includes local="yes">spdlog/spdlog.h</includes>
    <includes local="no">boost/filesystem.hpp</includes>
    <includes local="yes">http/mod/exec.h</includes>
    <includes local="yes">http/mod/file.h</includes>
    <includes local="yes">http/mod/match.h</includes>
    <includes local="yes">http/mod/method.h</includes>
    <includes refid="dc/d3f/__icons_8h" local="yes">src/_icons.h</includes>
    <includes refid="dd/d42/__utils_8h" local="yes">src/_utils.h</includes>
    <includes refid="db/d16/config_8h" local="yes">src/config.h</includes>
    <includes refid="d9/db6/datastore_8h" local="yes">src/datastore.h</includes>
    <includes refid="d8/dc3/server_8h" local="yes">src/server.h</includes>
    <incdepgraph>
      <node id="17">
        <label>boost/algorithm/string.hpp</label>
      </node>
      <node id="23">
        <label>system_error</label>
      </node>
      <node id="25">
        <label>functional</label>
      </node>
      <node id="20">
        <label>fmt/format.h</label>
      </node>
      <node id="28">
        <label>boost/functional/hash.hpp</label>
      </node>
      <node id="27">
        <label>boost/tokenizer.hpp</label>
      </node>
      <node id="9">
        <label>http/mod/match.h</label>
      </node>
      <node id="26">
        <label>boost/foreach.hpp</label>
      </node>
      <node id="29">
        <label>redox.hpp</label>
      </node>
      <node id="30">
        <label>gtest/gtest_prod.h</label>
      </node>
      <node id="16">
        <label>opencv2/opencv.hpp</label>
      </node>
      <node id="2">
        <label>string</label>
      </node>
      <node id="24">
        <label>src/datastore.h</label>
        <link refid="d9/db6/datastore_8h_source"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>map</label>
      </node>
      <node id="14">
        <label>regex</label>
      </node>
      <node id="10">
        <label>http/mod/method.h</label>
      </node>
      <node id="5">
        <label>spdlog/spdlog.h</label>
      </node>
      <node id="11">
        <label>src/_icons.h</label>
        <link refid="dc/d3f/__icons_8h_source"/>
      </node>
      <node id="18">
        <label>rapidxml_ns.hpp</label>
      </node>
      <node id="19">
        <label>rapidxml_ns_print.hpp</label>
      </node>
      <node id="21">
        <label>src/config.h</label>
        <link refid="db/d16/config_8h_source"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>vector</label>
      </node>
      <node id="6">
        <label>boost/filesystem.hpp</label>
      </node>
      <node id="33">
        <label>http/server.h</label>
      </node>
      <node id="12">
        <label>src/_utils.h</label>
        <link refid="dd/d42/__utils_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>iostream</label>
      </node>
      <node id="8">
        <label>http/mod/file.h</label>
      </node>
      <node id="4">
        <label>cxxopts.hpp</label>
      </node>
      <node id="32">
        <label>mutex</label>
      </node>
      <node id="0">
        <label>main.cpp</label>
        <link refid="main.cpp"/>
        <childnode refid="1" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>http/mod/exec.h</label>
      </node>
      <node id="13">
        <label>algorithm</label>
      </node>
      <node id="31">
        <label>src/server.h</label>
        <link refid="d8/dc3/server_8h_source"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>http/httpserver.h</label>
      </node>
      <node id="22">
        <label>memory</label>
      </node>
    </incdepgraph>
    <innerclass refid="d4/d43/structContainer" prot="public">Container</innerclass>
    <innernamespace refid="dd/d93/namespacestd_1_1placeholders">std::placeholders</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="df/d0a/main_8cpp_1a8ee3282bc313e547dbbb8d4f4010db61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void signalHandler</definition>
        <argsstring>(int signum)</argsstring>
        <name>signalHandler</name>
        <param>
          <type>int</type>
          <declname>signum</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main.cpp" line="44" column="1" bodyfile="main.cpp" bodystart="44" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="df/d0a/main_8cpp_1a0ddf1224851353fc92bfbff6f499fa97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char *argv[])</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main.cpp" line="49" column="1" bodyfile="main.cpp" bodystart="49" bodyend="235"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/><sp/><sp/>This<sp/>library<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/><sp/><sp/><sp/>modify<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/><sp/><sp/><sp/>License<sp/>as<sp/>published<sp/>by<sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/><sp/><sp/>version<sp/>2.1<sp/>of<sp/>the<sp/>License,<sp/>or<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/><sp/><sp/>This<sp/>library<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/><sp/><sp/><sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/><sp/><sp/><sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the<sp/>GNU</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/><sp/><sp/><sp/>Lesser<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"></highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/><sp/><sp/><sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/><sp/><sp/><sp/>License<sp/>along<sp/>with<sp/>this<sp/>library;<sp/>if<sp/>not,<sp/>write<sp/>to<sp/>the<sp/>Free<sp/>Software</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/><sp/><sp/><sp/>Foundation,<sp/>Inc.,<sp/>51<sp/>Franklin<sp/>Street,<sp/>Fifth<sp/>Floor,<sp/>Boston,<sp/>MA<sp/><sp/>02110-1301<sp/><sp/>USA</highlight></codeline>
<codeline lineno="15"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;cxxopts.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;spdlog/spdlog.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/filesystem.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;http/mod/exec.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;http/mod/file.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;http/mod/match.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;http/mod/method.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;src/_icons.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;src/_utils.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;src/config.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;src/datastore.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;src/server.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="dd/d93/namespacestd_1_1placeholders" kindref="compound">std::placeholders</ref>;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="d4/d43/structContainer" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d4/d43/structContainer" kindref="compound">Container</ref><sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/d60/namespacecds_1a06113560522abea20f7bdceb55de2bbc" kindref="member">cds::config_ptr</ref><sp/>config;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>data::redis_ptr<sp/>redox;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;<sp/>cds::Server<sp/>&gt;<sp/>server;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;<sp/>http::Server&lt;<sp/>http::HttpServer<sp/>&gt;<sp/>&gt;<sp/>www;</highlight></codeline>
<codeline lineno="42"><highlight class="normal">};</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>signalHandler(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>signum<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;CDS:Interrupt<sp/>signal<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>signum<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>received.\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>exit(<sp/>signum<sp/>);</highlight></codeline>
<codeline lineno="47"><highlight class="normal">}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[])<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>cxxopts::Options<sp/>options(</highlight><highlight class="stringliteral">&quot;cds&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Squawk<sp/>content<sp/>directory<sp/>server.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>options.add_options()</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>cds::PARAM_DIRECTORY,<sp/></highlight><highlight class="stringliteral">&quot;path<sp/>to<sp/>the<sp/>directory<sp/>with<sp/>the<sp/>mediafiles.<sp/>Multiple<sp/>entries<sp/>will<sp/>result<sp/>in<sp/>a<sp/>list<sp/>containing<sp/>all<sp/>directories.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cxxopts::value&lt;std::vector&lt;std::string&gt;&gt;(),<sp/></highlight><highlight class="stringliteral">&quot;PATH&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>cds::PARAM_LISTEN_ADDRESS,<sp/></highlight><highlight class="stringliteral">&quot;API<sp/>Webserver<sp/>IP-Adress<sp/>to<sp/>bind<sp/>to.&quot;</highlight><highlight class="normal">,<sp/>cxxopts::value&lt;std::string&gt;(),<sp/></highlight><highlight class="stringliteral">&quot;IP&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>cds::PARAM_HTTP_PORT,<sp/></highlight><highlight class="stringliteral">&quot;API<sp/>Webserver<sp/>IP<sp/>Port<sp/>to<sp/>bind<sp/>to.&quot;</highlight><highlight class="normal">,<sp/>cxxopts::value&lt;std::string&gt;(),<sp/></highlight><highlight class="stringliteral">&quot;PORT&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>cds::PARAM_TMP_DIRECTORY,<sp/></highlight><highlight class="stringliteral">&quot;temporary<sp/>folder<sp/>for<sp/>the<sp/>thumbnails.&quot;</highlight><highlight class="normal">,<sp/>cxxopts::value&lt;std::string&gt;(),<sp/></highlight><highlight class="stringliteral">&quot;PATH&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>cds::PARAM_TMDB_KEY,<sp/></highlight><highlight class="stringliteral">&quot;API<sp/>key<sp/>for<sp/>tmdb.&quot;</highlight><highlight class="normal">,<sp/>cxxopts::value&lt;std::string&gt;(),<sp/></highlight><highlight class="stringliteral">&quot;KEY&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>cds::PARAM_AMAZON_ACCESS_KEY,<sp/></highlight><highlight class="stringliteral">&quot;Access<sp/>key<sp/>for<sp/>amazon.&quot;</highlight><highlight class="normal">,<sp/>cxxopts::value&lt;std::string&gt;(),<sp/></highlight><highlight class="stringliteral">&quot;KEY&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>cds::PARAM_AMAZON_KEY,<sp/></highlight><highlight class="stringliteral">&quot;API<sp/>key<sp/>for<sp/>amazon.&quot;</highlight><highlight class="normal">,<sp/>cxxopts::value&lt;std::string&gt;(),<sp/></highlight><highlight class="stringliteral">&quot;KEY&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>cds::PARAM_REDIS,<sp/></highlight><highlight class="stringliteral">&quot;Redis<sp/>Database<sp/>(default:<sp/>localhost)&quot;</highlight><highlight class="normal">,<sp/>cxxopts::value&lt;std::string&gt;()-&gt;default_value(</highlight><highlight class="stringliteral">&quot;localhost&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;HOST&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>cds::PARAM_REDIS_PORT,<sp/></highlight><highlight class="stringliteral">&quot;Redis<sp/>Database<sp/>port<sp/>(default:<sp/>6379)&quot;</highlight><highlight class="normal">,<sp/>cxxopts::value&lt;std::string&gt;()-&gt;default_value(</highlight><highlight class="stringliteral">&quot;6379&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;PORT&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/></highlight><highlight class="stringliteral">&quot;help&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Print<sp/>help&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>options.parse(argc,<sp/>argv);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>options.count(<sp/></highlight><highlight class="stringliteral">&quot;help&quot;</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>options.help({</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Group&quot;</highlight><highlight class="normal">})<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(0);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/d43/structContainer" kindref="compound">Container</ref><sp/>_container;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>_redis_server<sp/>=<sp/>options[cds::PARAM_REDIS].as&lt;std::string&gt;();</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>_redis_port<sp/>=<sp/>options[cds::PARAM_REDIS_PORT].as&lt;std::string&gt;();</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>_container.redox<sp/>=<sp/><ref refid="df/dea/structdata_1ae94130e0ed9b83456766145fb3c1c562" kindref="member">data::make_connection</ref>(<sp/>_redis_server,<sp/>std::stoi(<sp/>_redis_port<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//load<sp/>config<sp/>from<sp/>database</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="df/dea/structdata_1ac0cfd0fa39bc3e3bdbd32e08289ddaea" kindref="member">data::config_exists</ref>(<sp/>_container.redox<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_container.config<sp/>=<sp/><ref refid="d9/d60/namespacecds_1a033625ff6b0a15415bbab3db4c3e1309" kindref="member">cds::json</ref>(<sp/><ref refid="df/dea/structdata_1a2e667bbfd4a9d1abeff95eadfd91a9c8" kindref="member">data::config</ref>(<sp/>_container.redox<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>_container.config<sp/>=<sp/>std::make_shared&lt;<sp/>cds::Config<sp/>&gt;();</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>options.count(<sp/>cds::PARAM_DIRECTORY<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_container.config-&gt;media.clear();</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>ff<sp/>=<sp/>options[cds::PARAM_DIRECTORY].as&lt;std::vector&lt;std::string&gt;&gt;();</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>f<sp/>:<sp/>ff)<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>boost::filesystem::is_directory(<sp/>f<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_container.config-&gt;media.push_back(<sp/>f<sp/>);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Path<sp/>is<sp/>not<sp/>a<sp/>directory.<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>f<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>options.count(<sp/>cds::PARAM_TMP_DIRECTORY<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>_container.config-&gt;tmp_directory<sp/>=<sp/><sp/>options[cds::PARAM_TMP_DIRECTORY].as&lt;std::string&gt;();<sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>options.count(<sp/>cds::PARAM_TMDB_KEY<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>_container.config-&gt;tmdb_key<sp/>=<sp/><sp/>options[cds::PARAM_TMDB_KEY].as&lt;std::string&gt;();<sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>options.count(<sp/>cds::PARAM_AMAZON_ACCESS_KEY<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>_container.config-&gt;amazon_access_key<sp/>=<sp/><sp/>options[cds::PARAM_AMAZON_ACCESS_KEY].as&lt;std::string&gt;();<sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>options.count(<sp/>cds::PARAM_AMAZON_KEY<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>_container.config-&gt;amazon_key<sp/>=<sp/><sp/>options[cds::PARAM_AMAZON_KEY].as&lt;std::string&gt;();<sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>options.count(<sp/>cds::PARAM_LISTEN_ADDRESS<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>_container.config-&gt;listen_address<sp/>=<sp/><sp/>options[cds::PARAM_LISTEN_ADDRESS].as&lt;std::string&gt;();<sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>options.count(<sp/>cds::PARAM_HTTP_PORT<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>_container.config-&gt;http_port<sp/>=<sp/>options[cds::PARAM_HTTP_PORT].as&lt;std::string&gt;();<sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//store<sp/>configuration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>_config_e<sp/>=<sp/><ref refid="d9/d60/namespacecds_1ad64f032e28ec0cc0b09c73a48b13eeab" kindref="member">cds::validate</ref>(<sp/>_container.config<sp/>);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!_config_e.empty()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>e<sp/>:<sp/>_config_e<sp/>)</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;*&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>e.message()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="df/dea/structdata_1a2e667bbfd4a9d1abeff95eadfd91a9c8" kindref="member">data::config</ref>(<sp/>_container.redox,<sp/><ref refid="d9/d60/namespacecds_1a033625ff6b0a15415bbab3db4c3e1309" kindref="member">cds::json</ref>(<sp/>_container.config<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>setup<sp/>logger<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::set_level(<sp/>spdlog::level::trace<sp/>);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>console<sp/>=<sp/>spdlog::stdout_color_mt(<sp/>cds::LOGGER<sp/>);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>console-&gt;info(<sp/></highlight><highlight class="stringliteral">&quot;Start<sp/>content<sp/>directory<sp/>server<sp/>({}:{})&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_container.config-&gt;listen_address,<sp/>_container.config-&gt;http_port<sp/>);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Setup<sp/>and<sp/>start<sp/>the<sp/>server<sp/>**/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>_container.server<sp/>=<sp/>std::make_shared&lt;<sp/>cds::Server<sp/>&gt;(<sp/>_redis_server,<sp/>std::stoi(<sp/>_redis_port<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>_container.www<sp/>=<sp/>std::shared_ptr&lt;<sp/>http::Server&lt;<sp/>http::HttpServer<sp/>&gt;<sp/>&gt;(</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>http::Server&lt;<sp/>http::HttpServer<sp/>&gt;(<sp/>_container.config-&gt;listen_address,<sp/>_container.config-&gt;http_port<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>_container.www-&gt;bind(<sp/>http::mod::Match&lt;&gt;(<sp/></highlight><highlight class="stringliteral">&quot;^\\/config$&quot;</highlight><highlight class="normal"><sp/>),</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>http::mod::Exec(<sp/>std::bind(<sp/>&amp;<ref refid="de/ddd/classcds_1_1Server_1aa86c23ba2b8426c67da83d1d69306569" kindref="member">cds::Server::config</ref>,<sp/>_container.server,<sp/>_1,<sp/>_2<sp/>)<sp/>),</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>http::mod::Http()<sp/>);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>_container.www-&gt;bind(<sp/>http::mod::Match&lt;&gt;(<sp/></highlight><highlight class="stringliteral">&quot;^\\/rescan$&quot;</highlight><highlight class="normal"><sp/>),</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>http::mod::Exec(<sp/>std::bind(<sp/>&amp;<ref refid="de/ddd/classcds_1_1Server_1af2e65c60a5f16e41ebcbc6669be5ffe1" kindref="member">cds::Server::rescan</ref>,<sp/>_container.server,<sp/>_1,<sp/>_2<sp/>)<sp/>),</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>http::mod::Http()<sp/>);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>_container.www-&gt;bind(<sp/>http::mod::Match&lt;&gt;(<sp/></highlight><highlight class="stringliteral">&quot;^\\/status$&quot;</highlight><highlight class="normal"><sp/>),</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>http::mod::Exec(<sp/>std::bind(<sp/>&amp;<ref refid="de/ddd/classcds_1_1Server_1a88df24b5970ad18d427315a870e4e944" kindref="member">cds::Server::status</ref>,<sp/>_container.server,<sp/>_1,<sp/>_2<sp/>)<sp/>),</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>http::mod::Http()<sp/>);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>_container.www-&gt;bind(<sp/>http::mod::Match&lt;&gt;(<sp/></highlight><highlight class="stringliteral">&quot;^\\/opds$&quot;</highlight><highlight class="normal"><sp/>),</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>http::mod::Exec(<sp/>std::bind(<sp/>&amp;cds::Server::opds,<sp/>_container.server,<sp/>_1,<sp/>_2<sp/>)<sp/>),</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>http::mod::Http()<sp/>);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>_container.www-&gt;bind(<sp/>http::mod::Match&lt;<sp/>std::string<sp/>&gt;(<sp/></highlight><highlight class="stringliteral">&quot;^\\/+((root|file|ebook|movie|album|serie|artist|image)|[[:digit:]]+)$&quot;</highlight><highlight class="normal">,<sp/>key::KEY<sp/>),</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>http::mod::Exec(<sp/>std::bind(<sp/>&amp;<ref refid="de/ddd/classcds_1_1Server_1a226022a43b29123d6fcb845ab5c4713d" kindref="member">cds::Server::node</ref>,<sp/>_container.server,<sp/>_1,<sp/>_2<sp/>)<sp/>),</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>http::mod::Http()</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>_container.www-&gt;bind(<sp/>http::mod::Match&lt;std::string&gt;(<sp/></highlight><highlight class="stringliteral">&quot;^\\/+(.+)\\/+sort$&quot;</highlight><highlight class="normal">,<sp/>key::KEY<sp/>),</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>http::mod::Exec(<sp/>std::bind(<sp/>&amp;<ref refid="de/ddd/classcds_1_1Server_1a7a2398284fc075e5325d9ae140afcdb8" kindref="member">cds::Server::sort</ref>,<sp/>_container.server,<sp/>_1,<sp/>_2<sp/>)<sp/>),</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>http::mod::Http()</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>_container.www-&gt;bind(<sp/>http::mod::Match&lt;std::string&gt;(<sp/></highlight><highlight class="stringliteral">&quot;^\\/+(.+)\\/+path$&quot;</highlight><highlight class="normal">,<sp/>key::KEY<sp/>),</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>http::mod::Exec(<sp/>std::bind(<sp/>&amp;<ref refid="de/ddd/classcds_1_1Server_1ad5fb8a933d0110b1983df7e97c82a63d" kindref="member">cds::Server::path</ref>,<sp/>_container.server,<sp/>_1,<sp/>_2<sp/>)<sp/>),</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>http::mod::Http()</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>_container.www-&gt;bind(<sp/>http::mod::Match&lt;std::string&gt;(<sp/></highlight><highlight class="stringliteral">&quot;^\\/+(.+)\\/+nodes$&quot;</highlight><highlight class="normal">,<sp/>key::KEY<sp/>),</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>http::mod::Exec(<sp/>std::bind(<sp/>&amp;<ref refid="de/ddd/classcds_1_1Server_1a2ee5708b9f35871a311feb06fa43a0e1" kindref="member">cds::Server::nodes</ref>,<sp/>_container.server,<sp/>_1,<sp/>_2<sp/>)<sp/>),</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>http::mod::Http()</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>_container.www-&gt;bind(<sp/>http::mod::Match&lt;std::string,<sp/>std::string&gt;(<sp/></highlight><highlight class="stringliteral">&quot;^\\/+(.+)\\/+type\\/+((ebook|movie|album|audio|serie|artist|image))$&quot;</highlight><highlight class="normal">,<sp/>key::KEY,<sp/>param::CLASS<sp/>),</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>http::mod::Exec(<sp/>std::bind(<sp/>&amp;<ref refid="de/ddd/classcds_1_1Server_1a8d0f5fcc6bb289bd3d2a1a2df2298e9b" kindref="member">cds::Server::files</ref>,<sp/>_container.server,<sp/>_1,<sp/>_2<sp/>)<sp/>),</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>http::mod::Http()</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>_container.www-&gt;bind(<sp/>http::mod::Match&lt;<sp/>std::string<sp/>&gt;(<sp/></highlight><highlight class="stringliteral">&quot;^\\/+sug\\/+(.*)$&quot;</highlight><highlight class="normal">,<sp/>param::NAME<sp/>),</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>http::mod::Exec(<sp/>std::bind(<sp/>&amp;<ref refid="de/ddd/classcds_1_1Server_1abd16cb6935350e7e0824315f4211ae21" kindref="member">cds::Server::sug</ref>,<sp/>_container.server,<sp/>_1,<sp/>_2<sp/>)<sp/>),</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>http::mod::Http()</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>_container.www-&gt;bind(<sp/>http::mod::Match&lt;<sp/>std::string,<sp/>std::string<sp/>&gt;(<sp/></highlight><highlight class="stringliteral">&quot;^\\/+(ebook|movie|album|serie|artist|image)\\/+(.*)$&quot;</highlight><highlight class="normal">,<sp/>key::TYPE,<sp/>param::NAME<sp/>),</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>http::mod::Exec(<sp/>std::bind(<sp/>&amp;<ref refid="de/ddd/classcds_1_1Server_1aaa29a062d4cac4928dd68a39901af02b" kindref="member">cds::Server::keywords</ref>,<sp/>_container.server,<sp/>_1,<sp/>_2<sp/>)<sp/>),</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>http::mod::Http()</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>_container.www-&gt;bind(<sp/>http::mod::Match&lt;<sp/>std::string<sp/>&gt;(<sp/></highlight><highlight class="stringliteral">&quot;^\\/+img\\/+(.*\\.jpg)$&quot;</highlight><highlight class="normal">,<sp/>key::KEY<sp/>),</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>http::mod::Exec(<sp/>[&amp;_container](http::Request&amp;<sp/>request,<sp/>http::Response&amp;<sp/>)<sp/>-&gt;<sp/>http::http_status<sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>request.uri(<sp/>fmt::format(<sp/></highlight><highlight class="stringliteral">&quot;{}/{}&quot;</highlight><highlight class="normal">,<sp/>_container.config-&gt;tmp_directory,<sp/>request.attribute(<sp/>key::KEY<sp/>)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>http::http_status::OK;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}),</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>http::mod::File(<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>),</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>http::mod::Http()</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>_container.www-&gt;bind(<sp/>http::mod::Match&lt;<sp/>std::string<sp/>&gt;(<sp/></highlight><highlight class="stringliteral">&quot;^\\/+res\\/+([[:digit:]]+)\\.(.*)$&quot;</highlight><highlight class="normal">,<sp/>key::KEY,<sp/>param::EXT<sp/>),</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>http::mod::Exec(<sp/>[&amp;_container](http::Request&amp;<sp/>request,<sp/>http::Response&amp;<sp/>)<sp/>-&gt;<sp/>http::http_status<sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>request.uri(<sp/><ref refid="df/dea/structdata_1a547f7721fc58fce2b5c27e4c4c226fca" kindref="member">data::get</ref>(<sp/>_container.redox,<sp/>request.attribute(<sp/>key::KEY<sp/>),<sp/>param::PATH<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>http::http_status::OK;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}),</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>http::mod::File(<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>),</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>http::mod::Http()</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>_container.www-&gt;bind(<sp/>http::mod::Match&lt;<sp/>std::string<sp/>&gt;(<sp/></highlight><highlight class="stringliteral">&quot;^\\/+squawk([[:digit:]]+).png$&quot;</highlight><highlight class="normal">,<sp/>key::KEY<sp/>),</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>http::mod::Exec(<sp/>[&amp;_container](http::Request&amp;<sp/>request,<sp/>http::Response&amp;<sp/>response<sp/>)<sp/>-&gt;<sp/>http::http_status<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>request.attribute(<sp/>key::KEY<sp/>)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;120&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>response.write(<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)squawk120_png,<sp/>squawk120_png_len<sp/>);<sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>request.attribute(<sp/>key::KEY<sp/>)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;64&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>response.write(<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)squawk64_png,<sp/>squawk64_png_len<sp/>);<sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>request.attribute(<sp/>key::KEY<sp/>)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;48&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>response.write(<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)squawk48_png,<sp/>squawk48_png_len<sp/>);<sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>request.attribute(<sp/>key::KEY<sp/>)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;32&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>response.write(<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)squawk32_png,<sp/>squawk32_png_len<sp/>);<sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>if(<sp/>request.attribute(<sp/>key::KEY_KEY<sp/>)<sp/>==<sp/>&quot;16&quot;<sp/>)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>response.write(<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)squawk16_png,<sp/>squawk16_png_len<sp/>);<sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>response.parameter<sp/>(<sp/>http::header::CONTENT_TYPE,<sp/>http::mime::mime_type<sp/>(<sp/>http::mime::PNG<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>http::http_status::OK;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}),</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>http::mod::Http()</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>_container.www-&gt;bind(<sp/>http::mod::Match&lt;&gt;(<sp/></highlight><highlight class="stringliteral">&quot;.*&quot;</highlight><highlight class="normal"><sp/>),</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>http::mod::Exec(<sp/>[&amp;_container](http::Request&amp;<sp/>request,<sp/>http::Response&amp;<sp/>response<sp/>)<sp/>-&gt;<sp/>http::http_status<sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spdlog::get<sp/>(<sp/></highlight><highlight class="stringliteral">&quot;cds&quot;</highlight><highlight class="normal"><sp/>)-&gt;warn<sp/>(<sp/></highlight><highlight class="stringliteral">&quot;HTTP<sp/>404:<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>request.uri()<sp/>);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>http::http_status::NOT_FOUND;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}),</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>http::mod::Http()</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>register<sp/>signal<sp/>SIGINT<sp/>and<sp/>signal<sp/>handler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>signal(SIGINT,<sp/>signalHandler);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(1)</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>sleep(1);<sp/>}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="235"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="main.cpp"/>
  </compounddef>
</doxygen>
