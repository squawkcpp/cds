<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="d0/d64/imageexif_8cpp" kind="file" language="C++">
    <compoundname>imageexif.cpp</compoundname>
    <includes refid="d1/d2a/imageexif_8h" local="yes">imageexif.h</includes>
    <includes local="no">iostream</includes>
    <includes local="no">fstream</includes>
    <includes local="no">vector</includes>
    <includes local="no">memory</includes>
    <includes local="yes">spdlog/spdlog.h</includes>
    <includes local="yes">exif.h</includes>
    <includes refid="dd/d42/__utils_8h" local="yes">../_utils.h</includes>
    <includes refid="d9/db6/datastore_8h" local="yes">../datastore.h</includes>
    <incdepgraph>
      <node id="649">
        <label>boost/algorithm/string.hpp</label>
      </node>
      <node id="632">
        <label>functional</label>
      </node>
      <node id="638">
        <label>fmt/format.h</label>
      </node>
      <node id="637">
        <label>boost/functional/hash.hpp</label>
      </node>
      <node id="636">
        <label>boost/tokenizer.hpp</label>
      </node>
      <node id="635">
        <label>boost/foreach.hpp</label>
      </node>
      <node id="639">
        <label>redox.hpp</label>
      </node>
      <node id="640">
        <label>gtest/gtest_prod.h</label>
      </node>
      <node id="648">
        <label>opencv2/opencv.hpp</label>
      </node>
      <node id="630">
        <label>string</label>
      </node>
      <node id="631">
        <label>../datastore.h</label>
        <link refid="d9/db6/datastore_8h_source"/>
        <childnode refid="632" relation="include">
        </childnode>
        <childnode refid="629" relation="include">
        </childnode>
        <childnode refid="633" relation="include">
        </childnode>
        <childnode refid="630" relation="include">
        </childnode>
        <childnode refid="634" relation="include">
        </childnode>
        <childnode refid="635" relation="include">
        </childnode>
        <childnode refid="636" relation="include">
        </childnode>
        <childnode refid="637" relation="include">
        </childnode>
        <childnode refid="638" relation="include">
        </childnode>
        <childnode refid="639" relation="include">
        </childnode>
        <childnode refid="640" relation="include">
        </childnode>
      </node>
      <node id="629">
        <label>map</label>
      </node>
      <node id="633">
        <label>regex</label>
      </node>
      <node id="642">
        <label>fstream</label>
      </node>
      <node id="644">
        <label>spdlog/spdlog.h</label>
      </node>
      <node id="650">
        <label>rapidxml_ns.hpp</label>
      </node>
      <node id="651">
        <label>rapidxml_ns_print.hpp</label>
      </node>
      <node id="627">
        <label>src/utils/imageexif.cpp</label>
        <link refid="imageexif.cpp"/>
        <childnode refid="628" relation="include">
        </childnode>
        <childnode refid="641" relation="include">
        </childnode>
        <childnode refid="642" relation="include">
        </childnode>
        <childnode refid="634" relation="include">
        </childnode>
        <childnode refid="643" relation="include">
        </childnode>
        <childnode refid="644" relation="include">
        </childnode>
        <childnode refid="645" relation="include">
        </childnode>
        <childnode refid="646" relation="include">
        </childnode>
        <childnode refid="631" relation="include">
        </childnode>
      </node>
      <node id="634">
        <label>vector</label>
      </node>
      <node id="628">
        <label>imageexif.h</label>
        <link refid="d1/d2a/imageexif_8h_source"/>
        <childnode refid="629" relation="include">
        </childnode>
        <childnode refid="630" relation="include">
        </childnode>
        <childnode refid="631" relation="include">
        </childnode>
      </node>
      <node id="645">
        <label>exif.h</label>
      </node>
      <node id="646">
        <label>../_utils.h</label>
        <link refid="dd/d42/__utils_8h_source"/>
        <childnode refid="647" relation="include">
        </childnode>
        <childnode refid="633" relation="include">
        </childnode>
        <childnode refid="629" relation="include">
        </childnode>
        <childnode refid="630" relation="include">
        </childnode>
        <childnode refid="634" relation="include">
        </childnode>
        <childnode refid="648" relation="include">
        </childnode>
        <childnode refid="644" relation="include">
        </childnode>
        <childnode refid="649" relation="include">
        </childnode>
        <childnode refid="650" relation="include">
        </childnode>
        <childnode refid="651" relation="include">
        </childnode>
        <childnode refid="638" relation="include">
        </childnode>
      </node>
      <node id="641">
        <label>iostream</label>
      </node>
      <node id="647">
        <label>algorithm</label>
      </node>
      <node id="643">
        <label>memory</label>
      </node>
    </incdepgraph>
    <innernamespace refid="d6/d84/namespaceutils">utils</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/><sp/><sp/>This<sp/>program<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/><sp/><sp/><sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/><sp/><sp/><sp/>the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/><sp/><sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/><sp/><sp/>This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/><sp/><sp/><sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/><sp/><sp/><sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/><sp/><sp/><sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"></highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/><sp/><sp/><sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/><sp/><sp/><sp/>along<sp/>with<sp/>this<sp/>program.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline lineno="14"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;imageexif.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;spdlog/spdlog.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;exif.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../_utils.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../datastore.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="d6/d84/namespaceutils" kindref="compound">utils</ref><sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>exif(<sp/>data::node_t&amp;<sp/>node<sp/><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ifstream<sp/>file(<sp/>node[param::PATH],<sp/>std::ios::binary<sp/>|<sp/>std::ios::ate<sp/>);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>std::streamsize<sp/>size<sp/>=<sp/>file.tellg();</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>file.seekg(<sp/>0,<sp/>std::ios::beg<sp/>);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>buffer<sp/>=<sp/>std::unique_ptr&lt;<sp/>uint8_t<sp/>&gt;(<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>uint8_t[size]<sp/>);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>file.read(<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)buffer.get(),<sp/>size<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>easyexif::EXIFInfo<sp/>result;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.parseFrom(<sp/>buffer.get(),<sp/>size<sp/>);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;Make&quot;</highlight><highlight class="normal">]<sp/>=<sp/>result.Make.c_str();</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;Model&quot;</highlight><highlight class="normal">]<sp/>=<sp/>result.Model.c_str();</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;Software&quot;</highlight><highlight class="normal">]<sp/>=<sp/>result.Software.c_str();</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;BitsPerSample&quot;</highlight><highlight class="normal">]<sp/>=<sp/>std::to_string(<sp/>result.BitsPerSample<sp/>);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;width&quot;</highlight><highlight class="normal">]<sp/>=<sp/>std::to_string(<sp/>result.ImageWidth<sp/>);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;height&quot;</highlight><highlight class="normal">]<sp/>=<sp/>std::to_string(<sp/>result.ImageHeight<sp/>);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;description&quot;</highlight><highlight class="normal">]<sp/>=<sp/>result.ImageDescription.c_str();</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;Orientation&quot;</highlight><highlight class="normal">]<sp/>=<sp/>std::to_string(<sp/>result.Orientation<sp/>);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;date&quot;</highlight><highlight class="normal">]<sp/>=<sp/>result.DateTime.c_str();</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;DateTimeOriginal&quot;</highlight><highlight class="normal">]<sp/>=<sp/>result.DateTimeOriginal.c_str();</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;SubSecTimeOriginal&quot;</highlight><highlight class="normal">]<sp/>=<sp/>result.SubSecTimeOriginal.c_str();</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;ExposureTime&quot;</highlight><highlight class="normal">]<sp/>=<sp/>std::to_string(<sp/>result.ExposureTime<sp/>);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;FNumber&quot;</highlight><highlight class="normal">]<sp/>=<sp/>std::to_string(<sp/>result.FNumber<sp/>);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;ISOSpeedRatings&quot;</highlight><highlight class="normal">]<sp/>=<sp/>std::to_string(<sp/>result.ISOSpeedRatings<sp/>);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;SubjectDistance&quot;</highlight><highlight class="normal">]<sp/>=<sp/>std::to_string(<sp/>result.SubjectDistance<sp/>);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;ExposureBiasValue&quot;</highlight><highlight class="normal">]<sp/>=<sp/>std::to_string(<sp/>result.ExposureBiasValue<sp/>);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;Flash&quot;</highlight><highlight class="normal">]<sp/>=<sp/>std::to_string(<sp/>result.Flash<sp/>);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;MeteringMode&quot;</highlight><highlight class="normal">]<sp/>=<sp/>std::to_string(<sp/>result.MeteringMode<sp/>);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;FocalLength&quot;</highlight><highlight class="normal">]<sp/>=<sp/>std::to_string(<sp/>result.FocalLength<sp/>);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;FocalLengthIn35mm&quot;</highlight><highlight class="normal">]<sp/>=<sp/>std::to_string(<sp/>result.FocalLengthIn35mm<sp/>);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;GeoLocation.Latitude&quot;</highlight><highlight class="normal">]<sp/>=<sp/>std::to_string(<sp/>result.GeoLocation.Latitude<sp/>);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;GeoLocation.Longitude&quot;</highlight><highlight class="normal">]<sp/>=<sp/>std::to_string(<sp/>result.GeoLocation.Longitude<sp/>);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;GeoLocation.Altitude&quot;</highlight><highlight class="normal">]<sp/>=<sp/>std::to_string(<sp/>result.GeoLocation.Altitude<sp/>);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spdlog::get<sp/>(<sp/>cds::LOGGER<sp/>)-&gt;warn<sp/>(<sp/></highlight><highlight class="stringliteral">&quot;error<sp/>load<sp/>exif:<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>node[param::PATH]<sp/>);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal">}</highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight><highlight class="comment">//namespace<sp/>utils</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="src/utils/imageexif.cpp"/>
  </compounddef>
</doxygen>
