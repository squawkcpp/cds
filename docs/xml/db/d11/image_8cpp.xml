<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="db/d11/image_8cpp" kind="file" language="C++">
    <compoundname>image.cpp</compoundname>
    <includes refid="d5/db2/image_8h" local="yes">image.h</includes>
    <incdepgraph>
      <node id="593">
        <label>image.h</label>
        <link refid="d5/db2/image_8h_source"/>
        <childnode refid="594" relation="include">
        </childnode>
        <childnode refid="595" relation="include">
        </childnode>
        <childnode refid="596" relation="include">
        </childnode>
      </node>
      <node id="602">
        <label>boost/algorithm/string.hpp</label>
      </node>
      <node id="605">
        <label>fmt/format.h</label>
      </node>
      <node id="595">
        <label>opencv2/opencv.hpp</label>
      </node>
      <node id="594">
        <label>string</label>
      </node>
      <node id="599">
        <label>map</label>
      </node>
      <node id="598">
        <label>regex</label>
      </node>
      <node id="601">
        <label>spdlog/spdlog.h</label>
      </node>
      <node id="603">
        <label>rapidxml_ns.hpp</label>
      </node>
      <node id="604">
        <label>rapidxml_ns_print.hpp</label>
      </node>
      <node id="600">
        <label>vector</label>
      </node>
      <node id="592">
        <label>src/utils/image.cpp</label>
        <link refid="image.cpp"/>
        <childnode refid="593" relation="include">
        </childnode>
      </node>
      <node id="596">
        <label>../_utils.h</label>
        <link refid="dd/d42/__utils_8h_source"/>
        <childnode refid="597" relation="include">
        </childnode>
        <childnode refid="598" relation="include">
        </childnode>
        <childnode refid="599" relation="include">
        </childnode>
        <childnode refid="594" relation="include">
        </childnode>
        <childnode refid="600" relation="include">
        </childnode>
        <childnode refid="595" relation="include">
        </childnode>
        <childnode refid="601" relation="include">
        </childnode>
        <childnode refid="602" relation="include">
        </childnode>
        <childnode refid="603" relation="include">
        </childnode>
        <childnode refid="604" relation="include">
        </childnode>
        <childnode refid="605" relation="include">
        </childnode>
      </node>
      <node id="597">
        <label>algorithm</label>
      </node>
    </incdepgraph>
    <innernamespace refid="d6/d84/namespaceutils">utils</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/><sp/><sp/>This<sp/>program<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/><sp/><sp/><sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/><sp/><sp/><sp/>the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/><sp/><sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/><sp/><sp/>This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/><sp/><sp/><sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/><sp/><sp/><sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/><sp/><sp/><sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"></highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/><sp/><sp/><sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/><sp/><sp/><sp/>along<sp/>with<sp/>this<sp/>program.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline lineno="14"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;image.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="d6/d84/namespaceutils" kindref="compound">utils</ref><sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>image_scale<sp/>(<sp/>cds::ECoverSizes::Enum<sp/>type,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>height<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>width<sp/>&gt;=<sp/>height<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cds::ECoverSizes::size(<sp/>type<sp/>)<sp/>/<sp/>width;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cds::ECoverSizes::size(<sp/>type<sp/>)<sp/>/<sp/>height;<sp/>}</highlight></codeline>
<codeline lineno="23"><highlight class="normal">}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal">std::string<sp/>make_cover_uri<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cds::ECoverSizes::Enum&amp;<sp/>type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/><ref refid="de/db2/namespacekey" kindref="compound">key</ref><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fmt::format<sp/>(<sp/></highlight><highlight class="stringliteral">&quot;/img/{}_{}.jpg&quot;</highlight><highlight class="normal">,<sp/>cds::ECoverSizes::str<sp/>(<sp/>type<sp/>),<sp/>key<sp/>);</highlight></codeline>
<codeline lineno="27"><highlight class="normal">}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal">std::string<sp/>make_cover_path<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>path,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cds::ECoverSizes::Enum&amp;<sp/>type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>key<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fmt::format<sp/>(<sp/></highlight><highlight class="stringliteral">&quot;{0}/{1}_{2}.jpg&quot;</highlight><highlight class="normal">,<sp/>path,<sp/>cds::ECoverSizes::str<sp/>(<sp/>type<sp/>),<sp/>key<sp/>);</highlight></codeline>
<codeline lineno="31"><highlight class="normal">}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33" refid="d8/d79/classutils_1_1Image_1a143e2a3fa9c6dbb2f0e70169d7e99671" refkind="member"><highlight class="normal"><ref refid="d8/d79/classutils_1_1Image_1a143e2a3fa9c6dbb2f0e70169d7e99671" kindref="member">Image::Image</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>path<sp/>)<sp/>:<sp/>image_(<sp/>cv::imread<sp/>(<sp/>path,<sp/>CV_LOAD_IMAGE_COLOR<sp/>)<sp/>)<sp/>{}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="d8/d79/classutils_1_1Image_1aa1d7f35b3fade6f28dc1ff5502985015" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d8/d79/classutils_1_1Image_1aa1d7f35b3fade6f28dc1ff5502985015" kindref="member">Image::width</ref>()</highlight></codeline>
<codeline lineno="36"><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>image_.cols;<sp/>}</highlight></codeline>
<codeline lineno="37" refid="d8/d79/classutils_1_1Image_1a369742a54a5723062d68a051c2e2ce8a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d8/d79/classutils_1_1Image_1a369742a54a5723062d68a051c2e2ce8a" kindref="member">Image::height</ref>()</highlight></codeline>
<codeline lineno="38"><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>image_.rows;<sp/>}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="d8/d79/classutils_1_1Image_1adbaa219675b555ef8587a0701b4184e0" refkind="member"><highlight class="normal">std::string<sp/><sp/><ref refid="d8/d79/classutils_1_1Image_1adbaa219675b555ef8587a0701b4184e0" kindref="member">Image::scale</ref>(</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>path<sp/>,</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cds::ECoverSizes::Enum&amp;<sp/>type<sp/>,</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>key<sp/><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>_cover_path<sp/>=<sp/>make_cover_path(<sp/>path,<sp/>type,<sp/>key<sp/>);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>_width<sp/>=<sp/>image_.cols;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>_height<sp/>=<sp/>image_.rows;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>_scale<sp/>=<sp/>image_scale(<sp/>type,<sp/>_width,<sp/>_height<sp/>);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>_target_width<sp/>=<sp/>_width<sp/>*<sp/>_scale;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>_target_height<sp/>=<sp/>_height<sp/>*<sp/>_scale;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cv::Mat<sp/>_target_image;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>_s<sp/>=<sp/>cv::Size(<sp/>static_cast&lt;<sp/>int<sp/>&gt;(<sp/>_target_width<sp/>),<sp/>static_cast&lt;<sp/>int<sp/>&gt;(<sp/>_target_height<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cv::resize(<sp/>image_,<sp/>_target_image,<sp/>_s<sp/>);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cv::imwrite(<sp/>_cover_path,<sp/>_target_image<sp/>);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>make_cover_uri(<sp/>type,<sp/>key<sp/>);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(<sp/>...<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spdlog::get<sp/>(<sp/>cds::LOGGER<sp/>)-&gt;warn<sp/>(<sp/></highlight><highlight class="stringliteral">&quot;error<sp/>opening<sp/>image<sp/>(key:{0})&quot;</highlight><highlight class="normal">,<sp/>key<sp/>);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal">}</highlight></codeline>
<codeline lineno="66"><highlight class="normal">}</highlight><highlight class="comment">//namespace<sp/>utils</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="src/utils/image.cpp"/>
  </compounddef>
</doxygen>
